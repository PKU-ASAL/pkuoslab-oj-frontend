{"version":3,"sources":["Component/common/LoginCheck.tsx","Component/common/ExportExcel.tsx","Utils/MarkdownPreview.ts","Utils/MarkdownText.tsx","Component/contest/API/getContestInfo.ts","Component/common/DTime.tsx","Component/contest/ContestHeader.tsx","Component/contest/exportRank.ts","Pages/Client/CContestInfo.tsx"],"names":["withTranslation","withRouter","props","dispatch","useDispatch","isLogin","useSelector","state","UserReducer","useEffect","cApi","getProfile","then","res","type","data","catch","jump","history","replace","UrlPrefix","location","pathname","ExportExcel","Component","handleExportAll","colMap","nowData","fileName","json","map","item","Object","keys","reduce","newData","key","sheet","XLSX","utils","json_to_sheet","this","openDownloadDialog","sheet2blob","undefined","handleExportAllJson","url","saveName","Blob","URL","createObjectURL","event","aLink","document","createElement","href","download","window","MouseEvent","createEvent","initMouseEvent","dispatchEvent","sheetName","workbook","SheetNames","Sheets","wbout","write","bookType","bookSST","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","s2ab","render","ButtonType","ButtonProps","onClick","getJson","e","message","error","ButtonText","host","apiAddress","FRONT_SERVER","MarkdownText","running","setRunning","useState","nowText","setNowText","isValueEmpty","text","code","id","trim","replaceAll","config","mode","cdn","emojiPath","theme","path","hljs","lineNumber","markdown","toc","mark","footnotes","autoSpace","math","inlineDigit","engine","VditorPreview","preview","getElementById","MarkdownPreview","style","overflowY","useContestInfo","contestId","update","contestInfo","ContestReducer","hasUpdate","setHasUpdate","getContestInfo","setTimeout","DTime","nowTime","setNowTime","Date","now","intervalId","setInterval","clearInterval","TimeDiff","time","connect","State","CState","username","userInfo","roles","afterContestSubmission","allowSliderMove","sliderTime","openSliderMove","exportData","setAfterContestSubmission","setSliderTime","setOpenSliderMove","selectedKey","setSelectedKey","match","params","nowSliderTime","setNowSliderTime","menuData","name","link","re","timeState","TimeRangeState","gmtStart","gmtEnd","isPractice","participants","indexOf","openness","features","value","Math","abs","markdownDescription","marginTop","className","float","fontWeight","unix2Time","fontSize","paddingRight","contestTitle","LockFilled","color","tipFormatter","min","parseInt","max","onChange","span","format","backgroundColor","border","selectedKeys","Item","push","t","size","marginRight","marginBottom","checked","checkedChildren","unCheckedChildren","judgeAuth","async","x","official","obj","rank","nickname","sumScore","ACNumber","penalty","y","Cell","score","tries","Promise","resolve","exportRank","padding","borderRadius","ClockCircleOutlined","TeamOutlined","participantNum","ContestInfo","minWidth","pageWidth","setPageWidth","querySelector","clientWidth","addEventListener","handleResize","removeEventListener","target","innerWidth","LoginCheck","textAlign","margin","maxWidth","marginLeft","fallback","Loading","routerC_Contest_M","r","exact","component"],"mappings":"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","file":"static/js/26.70e594dc.chunk.js","sourcesContent":["import {withRouter} from \"react-router-dom\";\nimport React, {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport cApi from \"Utils/API/c-api\"\nimport {UrlPrefix} from \"../../Config/constValue\";\n\nconst LoginCheck = (props: any) => {\n\n    const dispatch = useDispatch()\n    const isLogin = useSelector((state: any) => state.UserReducer.isLogin)\n\n    useEffect(() => {\n        if (isLogin === false) {\n            cApi.getProfile().then((res: any) => {\n                dispatch({type: \"setUserInfo\", data: res})\n                dispatch({type: \"userLogin\"})\n            }).catch(() => {\n                props.jump && props.history.replace(UrlPrefix + \"/login?to=\" + props.location.pathname)\n            })\n        }\n    }, [isLogin])\n\n    return (\n        <></>\n    )\n}\n\nexport default withTranslation()(withRouter(LoginCheck))\n","import {Component} from \"react\";\nimport {Button, message} from \"antd\";\nimport XLSX from \"xlsx\";\nimport {ButtonType} from \"antd/lib/button/button\";\n\ninterface IButtonText {\n    ButtonText: any\n    ButtonType: ButtonType\n    ButtonProps?: any\n    fileName: string\n    colMap?: any\n    nowData?: any\n    getJson?: any\n}\n\nclass ExportExcel extends Component<IButtonText, any> {\n\n    handleExportAll = (colMap: any, nowData: any, fileName: string) => {\n        const json = nowData.map((item: any) => {\n            return Object.keys(item).reduce((newData: any, key) => {\n                newData[colMap[key] || key] = item[key]\n                return newData\n            }, {})\n        });\n        // console.log(\"json\", json)\n        const sheet = XLSX.utils.json_to_sheet(json);\n        this.openDownloadDialog(this.sheet2blob(sheet, undefined), fileName + `.xlsx`);\n    }\n\n    handleExportAllJson = (json: any, fileName: string) => {\n        const sheet = XLSX.utils.json_to_sheet(json);\n        this.openDownloadDialog(this.sheet2blob(sheet, undefined), fileName + `.xlsx`);\n    }\n\n    openDownloadDialog = (url: any, saveName: any) => {\n        if (typeof url === 'object' && url instanceof Blob) {\n            url = URL.createObjectURL(url); // 创建blob地址\n        }\n        var aLink = document.createElement('a');\n        aLink.href = url;\n        aLink.download = saveName || ''; // HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效\n        var event;\n        if (window.MouseEvent) event = new MouseEvent('click');\n        else {\n            event = document.createEvent('MouseEvents');\n            event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        }\n        aLink.dispatchEvent(event);\n    }\n\n    sheet2blob = (sheet: any, sheetName: any) => {\n        sheetName = sheetName || 'sheet1';\n        let workbook: any = {\n            SheetNames: [sheetName],\n            Sheets: {}\n        };\n        workbook.Sheets[sheetName] = sheet; // 生成excel的配置项\n\n        let wopts: any = {\n            bookType: 'xlsx', // 要生成的文件类型\n            bookSST: false, // 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性\n            type: 'binary'\n        };\n        let wbout = XLSX.write(workbook, wopts);\n\n        // 字符串转ArrayBuffer\n        function s2ab(s: any) {\n            let buf = new ArrayBuffer(s.length);\n            let view = new Uint8Array(buf);\n            for (let i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n            return buf;\n        }\n\n        return new Blob([s2ab(wbout)], {type: \"application/octet-stream\"});\n    }\n\n    render() {\n        return (\n            <Button\n                type={this.props.ButtonType}\n                {...this.props.ButtonProps}\n                onClick={() => {\n                    if (this.props.getJson !== undefined) {\n                        this.props.getJson().then((json: any) => {\n                            this.handleExportAllJson(json, this.props.fileName)\n                        }).catch((e: any) => {\n                            // console.log(e)\n                            message.error(e)\n                        })\n                    } else {\n                        const nowData = this.props.nowData()\n                        const colMap = this.props.colMap(nowData)\n                        this.handleExportAll(colMap, nowData, this.props.fileName)\n                    }\n                }}\n            >\n                {this.props.ButtonText}\n            </Button>\n        )\n    }\n}\n\nexport default ExportExcel","// @ts-ignore\nimport VditorPreview from 'vditor/dist/method.min'\nimport {isValueEmpty} from \"./empty\";\nimport apiAddress from \"./API/apiAddress\";\n\nconst host = apiAddress().FRONT_SERVER;\n\nexport function MarkdownPreview(code: string | null | undefined, id: string) {\n    if (isValueEmpty(code) || isValueEmpty(code?.trim())) code = \"\"\n    code = code?.replaceAll(/`{3}\\n([-|0-9a-zA-Z])/g, \"```plaintext\\n$1\")\n    // 针对原本 $ 换行的公式，加以修正\n    code = code?.replaceAll(/\\$\\n(.*)\\n\\$/g, \"$ $1 $\")\n    const config = {\n        mode: \"light\",\n        cdn: host + \"/vditor\",\n        emojiPath: host + \"/vditor/dist/images/emoji\",\n        theme: {\n            path: host + \"/vditor/dist/css/content-theme\"\n        },\n        hljs: {\n            lineNumber: false\n        },\n        markdown: {\n            toc: true,\n            mark: true,\n            footnotes: true,\n            autoSpace: true,\n        },\n        math: {\n            inlineDigit: true,\n            engine: 'KaTeX'\n        }\n    }\n    // return VditorPreview.md2html(code, config)\n    return VditorPreview.preview(document.getElementById(id), code, config)\n}\n","import {MarkdownPreview} from \"./MarkdownPreview\";\nimport {useEffect, useState} from \"react\";\nimport {isValueEmpty} from \"./empty\";\n\nconst MarkdownText = (props: any) => {\n\n    const [running, setRunning] = useState<boolean>(false);\n    const [nowText, setNowText] = useState<boolean>(false);\n\n    useEffect(() => {\n        if (!isValueEmpty(props.text) && !running && nowText !== props.text) {\n            setRunning(true)\n            setNowText(props.text)\n            MarkdownPreview(props.text, props.id).then((res: any) => {\n                setRunning(false)\n            })\n        }\n    }, [props.id, props.text, running])\n\n    return (\n        <div id={props.id} style={{overflowY: \"hidden\"}}>\n        </div>\n    )\n}\n\nexport default MarkdownText\n","import {useDispatch, useSelector} from \"react-redux\";\nimport cApi from \"Utils/API/c-api\"\nimport {useEffect, useState} from \"react\";\n\nconst useContestInfo = (contestId: string, update?: boolean) => {\n    const contestInfo = useSelector((state: any) => {\n        return state.ContestReducer.contestInfo[contestId]\n    })\n    const dispatch = useDispatch()\n\n    const [hasUpdate, setHasUpdate] = useState(false)\n\n    useEffect(() => {\n        if(update === false || hasUpdate) return\n        if (contestInfo === undefined || update === true) {\n            setHasUpdate(true)\n            cApi.getContestInfo({contestId: contestId}).then((res: any) => {\n                dispatch({\n                    type: \"setContestInfo\",\n                    key: contestId,\n                    data: res\n                })\n            }).catch(()=>{\n                setTimeout(()=>{\n                    setHasUpdate(false)\n                }, 3000)\n            })\n        }\n    }, [contestInfo, update])\n    return update === false ? undefined : contestInfo\n}\n\nexport default useContestInfo","import {useEffect, useState} from \"react\";\nimport {TimeDiff} from \"../../Utils/Time\";\n\nconst DTime = (props: any)=>{\n\n    const [nowTime, setNowTime] = useState<number>(Date.now())\n\n    const update = () => {\n        setNowTime(Date.now())\n    }\n\n    useEffect(() => {\n        let intervalId = setInterval(() => update(), 1000)\n        return () => clearInterval(intervalId)\n    })\n\n    return (\n        <>\n            {props.type === \"before\" && TimeDiff(props.time, nowTime)}\n            {props.type === \"after\" && TimeDiff(nowTime, props.time)}\n        </>\n    )\n}\n\nexport default DTime","import {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport {Alert, Card, Col, Divider, Menu, Row, Slider, Space, Switch} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport getContestInfo from \"./API/getContestInfo\";\nimport {TimeDiff, TimeRangeState, unix2Time} from \"../../Utils/Time\";\nimport Countdown from \"antd/lib/statistic/Countdown\";\nimport {ClockCircleOutlined, LockFilled, TeamOutlined} from \"@ant-design/icons\";\nimport {ContestState, setAfterContestSubmission} from \"../../Redux/Action/contest\";\nimport {connect} from \"react-redux\";\nimport {UserState} from \"../../Type/Iuser\";\nimport {isValueEmpty} from \"../../Utils/empty\";\nimport DTime from \"../common/DTime\";\nimport judgeAuth from \"../../Utils/judgeAhtu\";\nimport {UrlPrefix} from \"../../Config/constValue\";\nimport ExportExcel from \"../common/ExportExcel\";\nimport exportRank from \"./exportRank\";\nimport MarkdownText from \"../../Utils/MarkdownText\";\n\nconst ContestHeader = (props: any) => {\n\n    const [selectedKey, setSelectedKey] = useState<string>(\"\")\n    const contestId = props.match.params.contestId\n    const url = props.location.pathname\n    const contestInfo = getContestInfo(contestId)\n    const [nowSliderTime, setNowSliderTime] = useState<number>(Date.now())\n\n    // console.log(contestInfo)\n\n    const menuData = [\n        {name: \"Register\", link: UrlPrefix + \"/contest/\" + contestId + \"/register\", re: /\\/contest\\/.*\\/register/g},\n        {name: \"Overview\", link: UrlPrefix + \"/contest/\" + contestId + \"/overview\", re: /\\/contest\\/.*\\/overview/g},\n        {name: \"Problem\", link: UrlPrefix + \"/contest/\" + contestId + \"/problem/1\", re: /\\/contest\\/.*\\/problem\\/.*/g},\n        {name: \"Status\", link: UrlPrefix + \"/contest/\" + contestId + \"/submission\", re: /\\/contest\\/.*\\/submission/g},\n        {name: \"Rank\", link: UrlPrefix + \"/contest/\" + contestId + \"/rank\", re: /\\/contest\\/.*\\/rank/g},\n    ]\n\n\n    const timeState = contestInfo !== undefined ? TimeRangeState(contestInfo.gmtStart, contestInfo.gmtEnd) : undefined\n    const isPractice = contestInfo !== undefined ? (contestInfo.participants.indexOf(props.username) !== -1) : undefined\n    const openness = contestInfo !== undefined ? contestInfo.features.openness : undefined\n\n    useEffect(() => {\n        if (url.match(/\\/contest\\/[0-9]*\\/?$/g) !== null && openness !== undefined && isPractice !== undefined) {\n            // 在私有模式下，率先跳转到注册页面\n            if (openness === \"private\" && !isPractice) props.history.replace(menuData[0].link)\n            else props.history.replace(menuData[1].link)\n        }\n        // 若已经注册，则不能访问注册页面\n        if (url.match(menuData[0].re) !== null && isPractice) props.history.replace(menuData[1].link)\n        menuData.map((value) => {\n            if (url.match(value.re) !== null) setSelectedKey(value.name)\n        })\n    }, [url, openness, isPractice])\n\n\n    useEffect(() => {\n        if (Math.abs(nowSliderTime - props.sliderTime) >= 1000 * 60) {\n            props.setSliderTime(nowSliderTime)\n        }\n    }, [nowSliderTime, props.sliderTime])\n\n    return (\n        <>\n            {contestInfo !== undefined && (\n                <>\n                    {!isValueEmpty(contestInfo.markdownDescription)\n                        && !isValueEmpty(contestInfo.markdownDescription.trim()) && (\n                            <Alert\n                                message={\n                                    <MarkdownText id={\"contest-markdownDescription\"}\n                                                  text={contestInfo?.markdownDescription}/>\n                                }\n                                type=\"info\"\n                            />\n                        )}\n                    <Card style={{marginTop: 25}}>\n                        <div className={\"center\"}>\n                            <span style={{float: \"left\"}}>\n                                <span style={{fontWeight: \"bold\"}}>开始时间：</span>\n                                {unix2Time(contestInfo.gmtStart)}\n                            </span>\n                            <span style={{fontWeight: \"bold\", fontSize: \"1.75rem\"}}>\n                                <span style={{paddingRight: 10}}>{contestInfo.contestTitle}</span>\n                                {contestInfo.features.openness === \"private\" && (\n                                    <LockFilled style={{color: \"red\"}}/>\n                                )}\n                                {contestInfo.features.openness === \"protected\" && (\n                                    <LockFilled style={{color: \"orange\"}}/>\n                                )}\n                            </span>\n                            <span style={{float: \"right\"}}>\n                                <span style={{fontWeight: \"bold\"}}>结束时间：</span>\n                                {unix2Time(contestInfo.gmtEnd)}\n                            </span>\n                        </div>\n                        {timeState !== \"wait\" && (\n                            <Slider\n                                style={{marginTop: 25}}\n                                tipFormatter={null}\n                                min={parseInt(contestInfo.gmtStart)}\n                                max={parseInt(contestInfo.gmtEnd)}\n                                value={\n                                    props.openSliderMove ? nowSliderTime :\n                                        Math.max(Math.min(Date.now(), parseInt(contestInfo.gmtEnd)), parseInt(contestInfo.gmtStart))\n                                }\n                                onChange={props.openSliderMove ? setNowSliderTime : undefined}\n                            />\n                        )}\n                        <div style={{marginTop: 15}} className={\"center\"}>\n                            <Row>\n                                <Col span={8}>\n                                    {timeState === \"running\" && (\n                                        <span style={{float: \"left\"}}>\n                                    <span style={{fontWeight: \"bold\"}}>已用时间：</span>\n                                    <DTime type={\"before\"} time={contestInfo.gmtStart}/>\n                                </span>\n                                    )}\n                                </Col>\n                                <Col span={8}>\n                                    {timeState === \"wait\" && (\n                                        <span style={{color: \"blue\"}}>\n                                    <Space>\n                                        距离开始还有：\n                                        <Countdown\n                                            className={\"contestHeaderTimer\"}\n                                            value={parseInt(contestInfo.gmtStart)}\n                                            format=\"H 时 m 分 s 秒\"\n                                        />\n                                    </Space>\n                                </span>\n                                    )}\n                                    {timeState === \"running\" && (\n                                        <span style={{color: \"red\"}}>进行中</span>\n                                    )}\n                                    {timeState === \"end\" && (\n                                        <span style={{color: \"green\"}}>已结束</span>\n                                    )}\n                                </Col>\n                                <Col span={8}>\n                                    {timeState === \"running\" && (\n                                        <span style={{float: \"right\"}}>\n                                    <span style={{fontWeight: \"bold\"}}>剩余时间：</span>\n                                    <DTime type={\"after\"} time={contestInfo.gmtEnd}/>\n                                </span>\n                                    )}\n                                </Col>\n                            </Row>\n                        </div>\n                    </Card>\n\n                </>\n            )}\n            <Row style={{backgroundColor: \"white\", border: \"1px solid #dcdee2\"}}>\n                <Col span={10}>\n                    <Menu\n                        mode=\"horizontal\"\n                        theme={\"light\"}\n                        style={{border: 0}}\n                        selectedKeys={[selectedKey]}\n                    >\n                        {menuData.map((value) => {\n                            if (timeState === \"wait\" && value.name !== \"Register\") return\n                            if (isPractice && value.name === \"Register\") return\n                            if (openness === \"private\" && isPractice === false && value.name !== \"Register\") return\n                            return (\n                                <Menu.Item key={value.name} onClick={() => {\n                                    setSelectedKey(value.name)\n                                    props.history.push(value.link)\n                                }}\n                                >\n                                    {props.t(value.name)}\n                                </Menu.Item>\n                            )\n                        })}\n                    </Menu>\n                </Col>\n                <Col span={14}>\n                    {contestInfo !== undefined && (\n                        <Space size={10} style={{\n                            marginTop: \"12px\",\n                            marginRight: \"30px\",\n                            marginBottom: \"12px\",\n                            float: \"right\",\n                            color: \"grey\"\n                        }}>\n                            {props.openSliderMove && (\n                                <>\n                                    {TimeDiff(contestInfo.gmtStart, nowSliderTime)}\n                                    <Divider type={\"vertical\"}/>\n                                </>\n                            )}\n                            {props.allowSliderMove === true && selectedKey === \"Rank\" && (\n                                <>\n                                    历史回放\n                                    <Switch\n                                        checked={props.openSliderMove}\n                                        onChange={props.setOpenSliderMove}\n                                        checkedChildren={\"启用\"}\n                                        unCheckedChildren={\"关闭\"}\n                                    />\n                                    <Divider type={\"vertical\"}/>\n                                </>\n                            )}\n                            {judgeAuth(props.roles, [\"admin\", \"superadmin\"]) &&\n                                timeState === \"end\" && selectedKey === \"Rank\" && (\n                                    <>\n                                        赛后提交\n                                        <Switch\n                                            checked={props.afterContestSubmission}\n                                            onChange={props.setAfterContestSubmission}\n                                            checkedChildren={\"显示\"}\n                                            unCheckedChildren={\"不显示\"}\n                                        />\n                                        <Divider type={\"vertical\"}/>\n                                    </>\n                                )}\n                            {judgeAuth(props.roles, [\"admin\", \"superadmin\"]) &&\n                                selectedKey === \"Rank\" && (\n                                    <>\n                                        <ExportExcel\n                                            ButtonProps={{size: \"small\"}}\n                                            ButtonText={\"导出\"}\n                                            ButtonType={\"link\"}\n                                            getJson={() => exportRank(props.exportData)}\n                                            fileName={contestInfo.contestTitle + \"_\" + Date.now() + \"_结果导出\"}\n                                        />\n                                        <Divider type={\"vertical\"}/>\n                                    </>\n                                )}\n                            {contestInfo.features.mode === \"acm\" && (\n                                <span style={{\n                                    backgroundColor: \"#3676b6\",\n                                    color: \"#fff\",\n                                    padding: \"0 10px\",\n                                    borderRadius: \".75rem\"\n                                }}>ACM</span>\n                            )}\n                            {contestInfo.features.mode === \"ioi\" && (\n                                <span style={{\n                                    backgroundColor: \"#ea517f\",\n                                    color: \"#fff\",\n                                    padding: \"0 10px\",\n                                    borderRadius: \".75rem\"\n                                }}>IOI</span>\n                            )}\n                            {contestInfo.features.mode === \"oi\" && (\n                                <span style={{\n                                    backgroundColor: \"#f8df72\",\n                                    color: \"#fff\",\n                                    padding: \"0 10px\",\n                                    borderRadius: \".75rem\"\n                                }}>OI</span>\n                            )}\n                            <Divider type={\"vertical\"}/>\n                            <span><ClockCircleOutlined/> {TimeDiff(contestInfo.gmtStart, contestInfo.gmtEnd)}</span>\n                            <Divider type={\"vertical\"}/>\n                            <span><TeamOutlined/> {contestInfo.participantNum}</span>\n                        </Space>\n                    )}\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    const State: UserState = state.UserReducer\n    const CState: ContestState = state.ContestReducer\n    return {\n        username: State.userInfo?.username,\n        roles: State.userInfo?.roles,\n        afterContestSubmission: CState.afterContestSubmission,\n        allowSliderMove: CState.allowSliderMove,\n        sliderTime: CState.sliderTime,\n        openSliderMove: CState.openSliderMove,\n        exportData: CState.exportData\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setAfterContestSubmission: (data: boolean) => dispatch({\n        type: \"setAfterContestSubmission\",\n        data: data\n    }),\n    setSliderTime: (data: number) => dispatch({\n        type: \"setSliderTime\", data: data\n    }),\n    setOpenSliderMove: (data: boolean) => dispatch({\n        type: \"setOpenSliderMove\", data: data\n    })\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(withRouter(ContestHeader)))\n","export default async function exportRank(data: any) {\n    let res: any = []\n    for (const x of data) {\n        if (x.official === true) {\n            let obj: any = {\n                \"排名\": x.rank,\n                \"姓名\": x.nickname,\n                \"学号\": x.username,\n                \"总分\": x.sumScore,\n                \"过题数\": x.ACNumber,\n                \"罚时\": x.penalty,\n            }\n            for (const y in x.Cell) {\n                obj[\"题目\" + y + \"-分数\"] = x.Cell[y].score\n                obj[\"题目\" + y + \"-提交次数\"] = x.Cell[y].tries\n                obj[\"题目\" + y + \"-通过情况\"] = x.Cell[y].className\n            }\n            res.push(obj)\n        }\n    }\n    return Promise.resolve(res)\n}\n","import {withTranslation} from \"react-i18next\";\nimport {Route, withRouter} from \"react-router-dom\";\nimport ContestHeader from \"../../Component/contest/ContestHeader\";\nimport {routerC_Contest_M} from \"../../Config/router/routerC\";\nimport React, {Dispatch, Suspense, useEffect, useState} from \"react\";\nimport Loading from \"../../Utils/Loading\";\nimport LoginCheck from \"../../Component/common/LoginCheck\";\nimport {ContestState} from \"../../Redux/Action/contest\";\nimport {connect} from \"react-redux\";\nimport {TimeRangeState} from \"../../Utils/Time\";\n\n\nconst CContestInfo = (props: any) => {\n    const contestId = props.match.params.contestId\n    const contestInfo = props.ContestInfo[contestId]\n    const timeState = contestInfo !== undefined ? TimeRangeState(contestInfo.gmtStart, contestInfo.gmtEnd) : undefined\n    let minWidth = 500\n\n    const [pageWidth, setPageWidth] = useState<number>(document.querySelector('body')?.clientWidth as number)\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize)\n        return () => {\n            window.removeEventListener('resize', handleResize)\n        }\n    },)\n    const handleResize = (e: any) => {\n        setPageWidth(e.target.innerWidth)\n    }\n\n    if (props.location.pathname.match(/\\/contest\\/.*\\/rank/g) !== null) {\n        minWidth = Math.max(500, (props.minWidth ?? 0) + 100)\n    }\n    return (\n        <>\n            <LoginCheck jump={true}/>\n            <div style={minWidth <= 1500 ? {textAlign: \"center\", margin: \"0 auto\"} : undefined}>\n                <div style={minWidth <= 1500 ? {\n                    textAlign: \"left\",\n                    maxWidth: \"1500px\",\n                    margin: \"0 auto\"\n                } : {\n                    textAlign: \"left\",\n                    maxWidth: \"1500px\",\n                    marginLeft: Math.max(0, (pageWidth as number - minWidth) / 2)\n                }}>\n                    <ContestHeader/>\n                    {contestInfo !== undefined && timeState !== \"wait\" && (\n                        <div style={{marginTop: 25}}>\n                            <Suspense fallback={<Loading/>}>\n                                {\n                                    routerC_Contest_M.map((r) => {\n                                        return (\n                                            <Route key={r.id} path={r.path} exact={r.exact}\n                                                   component={r.component}/>\n                                        )\n                                    })\n                                }\n                            </Suspense>\n                        </div>\n                    )}\n                </div>\n\n            </div>\n        </>\n    )\n}\nconst mapStateToProps = (state: any) => {\n    const State: ContestState = state.ContestReducer\n    return {\n        ContestInfo: State.contestInfo,\n        minWidth: State.minWidth\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(withRouter(CContestInfo)))\n"],"sourceRoot":""}