{"version":3,"sources":["Utils/fileUpload.ts","Component/common/Form/Item/ItemTitle.tsx","Component/common/CodeEditor.tsx","Component/common/Form/Item/ItemText.tsx","Component/common/Form/Item/ItemCodeEditor.tsx","Component/common/Form/Item/ItemUpload.tsx","Component/judgeTemplate/Form/TemplateMForm.tsx","Pages/Manage/MJudgeTemplate.tsx","Component/common/Table/TableWithPagination.tsx","Component/common/Form/ModalFormUseForm.tsx"],"names":["fileUpload","files","callback","formData","FormData","num","pros","md5Set","forEach","file","push","arrayBuffer","then","value","code","md5","CApi","getFileByMD5","Promise","resolve","append","all","uploadFile","data","map","fileUploadWithoutMD5","uploadSingleFile","withTranslation","props","Item","label","t","name","required","langMap","cpp","c","java","sql","python","CodeEditor","extensions","lang","height","readOnly","theme","githubLight","autoFocus","basicSetup","lineNumbers","autocompletion","syntaxHighlighting","tabSize","completionKeymap","lintKeymap","foldKeymap","searchKeymap","allowMultipleSelections","bracketMatching","onChange","initialValue","help","addonAfter","ItemEditor","UploadFile","nameList","nm","accept","split","id","filename","downloadFilename","downloadFileSuffix","isValueEmpty","style","marginBottom","size","onClick","path","apiAddress","CLIENT_SERVER","window","open","danger","multiple","action","listType","beforeUpload","ues","showUploadList","className","InboxOutlined","rules","ItemTitle","ItemText","mode","width","ItemCodeEditor","use","withRouter","pathArray","location","pathname","type","length","colData","title","dataIndex","responsive","render","text","unix2Time","parseInt","rows","TableName","subForm","component","dataLoader","async","mApi","getOneTemplate","updateAppendProps","dataSubmitter","updateTemplate","createTemplate","marginTop","overflow","bordered","extra","columns","API","paras","MApi","pageTemplateList","rowKey","connect","state","UState","UserReducer","TState","TableReduce","roles","userInfo","tableData","dispatch","setTableInfo","setDataSource","add","total","setTotal","useState","setTableDataX","loading","setLoading","PageNow","setPageNow","PageSize","setPageSize","ck","defaultPageSize","searchText","setSearchText","tableVersion","setTableVersion","setTableData","undefined","getInfo","pageNow","pageSize","searchKey","moreProps","propsTableInfo","tableInfo","form","setFieldsValue","pn","ps","sk","fmp","getFieldsValue","APIRowsTransForm","totalNum","totalPage","useEffect","initRequestProps","useForm","onFinish","values","JSON","stringify","onReset","resetFields","tf","valuesAfter","propsTableVersion","dataSource","useList","cardProps","search","getForm","placeholder","onSearch","enterButton","useFormBtn","marginLeft","htmlType","grid","itemLayout","renderItem","pagination","page","current","hideOnSinglePage","showQuickJumper","showLessItems","showSizeChanger","pageSizeOptions","rowSelection","addTableVersion","addManageInitData","key","formMapRef","useRef","formVis","setFormVis","saveInitData","setSaveInitData","setCurrent","submitting","setSubmitting","setTimeout","formInstanceRef","formName","submitData","submit","Object","assign","res","afterSubmit","onClose","message","success","finally","validateFields","catch","error","btnProps","btnType","create","update","fork","batchUpdate","initData","hied","content","duration","paddingLeft","paddingRight","btnIcon","btnName","minWidth","destroyOnClose","visible","maskClosable","onCancel","footer","layout","initialValues","scrollToFirstError","preserve","onCurrentChange","currentPage","submitter","submitButtonProps","stepsFormRender","dom","item","index","StepForm"],"mappings":"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","file":"static/js/7.d0ad460d.chunk.js","sourcesContent":["import CApi from \"Utils/API/c-api\"\nimport md5 from \"js-md5\";\n\nexport const fileUpload = (files: File[], callback: any) => {\n    let formData = new FormData();\n    let num = 0\n    let pros: Promise<any>[] = []\n    let md5Set: Promise<any>[] = []\n    files.forEach((file) => {\n        md5Set.push(\n            file.arrayBuffer().then(((value) => {\n                let code = md5(value)\n                pros.push(\n                    CApi.getFileByMD5({md5: code}).then((value: any) => {\n                        if (value !== null) {\n                            callback(value)\n                            return Promise.resolve()\n                        } else {\n                            formData.append(\"files\", file);\n                            num += 1;\n                            return Promise.resolve()\n                        }\n                    })\n                )\n                return Promise.resolve()\n            }))\n        )\n    });\n\n    Promise.all(md5Set).then(() => {\n        Promise.all(pros).then(() => {\n            if (num !== 0) {\n                CApi.uploadFile(formData).then((data: any) => {\n                    data.map((value: any) => {\n                        callback(value)\n                        return undefined\n                    })\n                })\n            }\n        })\n    })\n}\n\nexport const fileUploadWithoutMD5 = (file: File, callback: any) => {\n    let formData = new FormData();\n    formData.append(\"file\", file);\n    CApi.uploadSingleFile(formData).then((data: any) => {\n        callback(data)\n        return undefined\n    })\n}","import {Form, Input} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\n\nconst ItemTitle = (props: any) => {\n    return (\n        <>\n            <Form.Item label={props.label ?? props.t(\"title\")} name={props.name ?? \"title\"} required={true}>\n                <Input/>\n            </Form.Item>\n        </>\n    )\n}\n\nexport default withTranslation()(ItemTitle)\n","import CodeMirror from '@uiw/react-codemirror';\nimport {githubLight} from '@uiw/codemirror-theme-github';\nimport {cpp} from '@codemirror/lang-cpp';\nimport {java} from '@codemirror/lang-java';\nimport {sql} from '@codemirror/lang-sql';\nimport {python} from '@codemirror/lang-python';\n\n\ninterface ICodeEditor {\n    lang: \"c\" | \"cpp\" | \"java\" | \"sql\" | \"python\" | \"text\"\n    code?: string\n    value?: string\n    className?: string\n    onChange?: any\n    readOnly?: boolean\n\n}\n\n\nconst langMap = {\n    cpp: cpp,\n    c: cpp,\n    java: java,\n    sql: sql,\n    python: python,\n}\n\nconst CodeEditor = (props: ICodeEditor) => {\n\n    let extensions: any = []\n    if (props.lang !== \"text\") {\n        extensions = [(langMap[props.lang])()]\n    }\n\n    return (\n        <>\n            <CodeMirror\n                value={props.value}\n                height={\"400px\"}\n                readOnly={props.readOnly ?? false}\n                theme={githubLight}\n                autoFocus={true}\n                extensions={extensions}\n                basicSetup={{\n                    lineNumbers: true,\n                    autocompletion: true,\n                    syntaxHighlighting: true,\n                    tabSize: 4,\n                    completionKeymap: true,\n                    lintKeymap: true,\n                    foldKeymap: true,\n                    searchKeymap: true,\n                    allowMultipleSelections: true,\n                    bracketMatching: true\n                }}\n                // options={{\n                //     indentUnit: 4,\n                //     smartIndent: true,\n                //     lineWrapping: true,\n                //     autoRefresh: true,\n                //     electricChars: true\n                // }}\n                onChange={(value) => {\n                    props.onChange && props.onChange(value)\n                }}\n            />\n        </>\n    )\n\n}\n\nexport default CodeEditor\n","import {Form, Input} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\n\nconst ItemText = (props: any) => {\n    return (\n        <>\n            <Form.Item\n                label={props.label}\n                name={props.name}\n                required={props.required ?? true}\n                initialValue={props.initialValue}\n                help={props.help}\n            >\n                <Input addonAfter={props.addonAfter}/>\n            </Form.Item>\n        </>\n    )\n}\n\nexport default withTranslation()(ItemText)","import {Form} from \"antd\";\nimport CodeEditor from \"../../CodeEditor\";\n\nconst ItemEditor = (props: any) => {\n    return (\n\n        <Form.Item label={props.label} name={props.name} {...props}>\n            <CodeEditor lang={props.lang}/>\n        </Form.Item>\n    )\n}\n\nexport default ItemEditor","import {Button, Form, Space} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport {InboxOutlined} from \"@ant-design/icons\";\nimport Dragger from \"antd/lib/upload/Dragger\";\nimport {isValueEmpty} from \"../../../../Utils/empty\";\nimport apiAddress from \"../../../../Utils/API/apiAddress\";\nimport {fileUpload, fileUploadWithoutMD5} from \"../../../../Utils/fileUpload\";\n\ninterface ItemUploadPropsType{\n    label: string       // Form 标签\n    name: string        // Form 字段\n    required: boolean   // Form 必要性校验\n    accept: string      // 可接受的文件类型\n    use: \"user\" | \"admin\"       // 上传文件着\n    downloadFilename?: string    // 下载时的文件名\n    downloadFileSuffix: string  // 下载的文件后缀\n}\n\nconst ItemUpload = (props: ItemUploadPropsType & any) => {\n\n    return (\n        <>\n            <Form.Item label={props.label ?? \"上传文件\"} name={props.name} rules={[{required: props.required}]}>\n                <UploadFile {...props}/>\n            </Form.Item>\n        </>\n    )\n}\n\n\n\nconst UploadFile = (props: any) => {\n\n    const {value, onChange} = props\n\n    let nameList: string[] = []\n    for (let nm of props.accept.split(\",\")) {\n        nameList.push(\"*\" + nm)\n    }\n\n    const callback = (value: any) => {\n        onChange(value.id)\n    }\n    const upload = (file: any) => {\n        if (props.ues === \"user\")\n            fileUploadWithoutMD5(file, callback)\n        else fileUpload([file], callback)\n    }\n\n    const filename = (props.downloadFilename ?? value) + props.downloadFileSuffix;\n\n    return (\n        <>\n            {!isValueEmpty(value) && (\n                <div style={{marginBottom: 24}}>\n                    <div> 已有文件： </div>\n                    <Space>\n                        {filename}\n                        <Button size={\"small\"} onClick={() => {\n                            const path = apiAddress().CLIENT_SERVER + \"/api/filesys/download/\" + value + \"/\" + filename\n                            window.open(path)\n                        }}>下载</Button>\n                        <Button danger size={\"small\"} onClick={() => {\n                            onChange(null)\n                        }}>删除</Button>\n                    </Space>\n\n                </div>\n            )}\n            <Dragger\n                multiple={false}\n                accept={props.accept}\n                action=\"\"\n                listType=\"text\"\n                beforeUpload={upload}\n                showUploadList={false}\n            >\n                <p className=\"ant-upload-drag-icon\">\n                    <InboxOutlined/>\n                </p>\n                <p className=\"ant-upload-text\">单击或拖动文件到此区域进行上传</p>\n                <p className=\"ant-upload-hint\">\n                    请上传一个 {nameList} 文件\n                </p>\n            </Dragger>\n        </>\n    )\n}\n\nexport default withTranslation()(ItemUpload)\n","import {withTranslation} from \"react-i18next\";\nimport ItemTitle from \"../../common/Form/Item/ItemTitle\";\nimport ItemText from \"../../common/Form/Item/ItemText\";\nimport {Form, Select} from \"antd\";\nimport ItemCodeEditor from \"../../common/Form/Item/ItemCodeEditor\";\nimport ItemUpload from \"../../common/Form/Item/ItemUpload\";\n\nconst TemplateMForm = (props: any) => {\n    return (\n        <>\n            <ItemTitle/>\n            <ItemText label={\"备注\"} name={\"comment\"} required={false}/>\n            <Form.Item label={\"文件后缀\"} name={\"acceptFileExtensions\"} required>\n                <Select mode=\"tags\" style={{ width: '100%' }} />\n            </Form.Item>\n            <ItemCodeEditor\n                label={\"shell脚本\"}\n                name={\"shellScript\"}\n                lang={\"cpp\"}\n                className={\"JudgeTemplateCodeEditor\"}\n                rules={[{required: true}]}\n            />\n            <ItemUpload\n                label={\"ZIP资源文件\"}\n                name={\"zipFileId\"}\n                required={false}\n                accept={\".zip\"}\n                use={\"admin\"}\n                downloadFileSuffix={\".zip\"}\n            />\n\n        </>\n    )\n}\n\nexport default withTranslation()(TemplateMForm)\n","import React from \"react\";\nimport {Card, Space} from \"antd\";\nimport MApi from \"../../Utils/API/m-api\";\nimport mApi from \"../../Utils/API/m-api\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport TableWithPagination from \"../../Component/common/Table/TableWithPagination\";\nimport {unix2Time} from \"../../Utils/Time\";\nimport ModalFormUseForm from \"../../Component/common/Form/ModalFormUseForm\";\nimport TemplateMForm from \"../../Component/judgeTemplate/Form/TemplateMForm\";\n\nconst MJudgeTemplate = (props: any) => {\n    const pathArray = props.location.pathname.split(\"/\")\n    const type = pathArray[pathArray.length - 1]\n\n    let colData: any[] = [\n        {\n            title: \"ID\",\n            dataIndex: \"id\",\n            width: 50,\n            responsive: [\"lg\", \"sm\", \"xs\"]\n        },\n        {\n            title: props.t(\"Owner\"),\n            dataIndex: \"username\",\n            width: \"auto\",\n            responsive: [\"lg\"],\n        },\n        {\n            title: props.t(\"title\"),\n            dataIndex: \"title\",\n            width: \"auto\",\n            responsive: [\"lg\", \"sm\"],\n        },\n        {\n            title: props.t(\"comment\"),\n            dataIndex: \"comment\",\n            width: \"auto\",\n            responsive: [\"lg\"],\n        },\n        {\n            title: props.t(\"CreateTime\"),\n            dataIndex: \"gmtCreate\",\n            width: \"auto\",\n            responsive: [\"lg\", \"sm\"],\n            render: (text: string) => {\n                return unix2Time(parseInt(text))\n            }\n        },\n        {\n            title: props.t(\"ModifiedTime\"),\n            dataIndex: \"gmtModified\",\n            width: \"auto\",\n            responsive: [\"lg\", \"sm\"],\n            render: (text: string) => {\n                return unix2Time(parseInt(text))\n            }\n        },\n        {\n            title: props.t(\"operator\"),\n            width: \"150px\",\n            render: (text: any, rows: any) => {\n                return <Space size={3}>\n                    <ModalFormUseForm\n                        TableName={`TemplateList-${type}`}\n                        width={600}\n                        title={rows.title}\n                        type={\"update\"}\n                        subForm={[\n                            {\n                                component: <TemplateMForm/>,\n                                label: \"\"\n                            },\n                        ]}\n                        dataLoader={async () => {\n                            return mApi.getOneTemplate({id: rows.id}).then((value: any) => {\n                                return Promise.resolve(value)\n                            })\n                        }}\n                        updateAppendProps={{id: rows.id}}\n                        dataSubmitter={(value: any) => {\n                            return mApi.updateTemplate({type: type === \"io\" ? 0 : 2, ...value})\n                        }}\n                    />\n                    <ModalFormUseForm\n                        TableName={`TemplateList-${type}`}\n                        width={600}\n                        title={\"新建模板(克隆自\" + rows.title + \")\"}\n                        type={\"fork\"}\n                        subForm={[\n                            {\n                                component: <TemplateMForm/>,\n                                label: \"\"\n                            },\n                        ]}\n                        dataLoader={async () => {\n                            return mApi.getOneTemplate({id: rows.id}).then((value: any) => {\n                                return Promise.resolve(value)\n                            })\n                        }}\n                        dataSubmitter={(value: any) => {\n                            return mApi.createTemplate({type: type === \"io\" ? 0 : 2, ...value})\n                        }}\n                    />\n                </Space>\n            }\n        }\n    ]\n\n    return (\n        <div style={{marginTop: -20, overflow: \"hidden\"}}>\n            <Card\n                size={\"small\"}\n                bordered={true}\n                title={type === \"io\" ? \"基础IO模板\" : \"高阶评测模板\"}\n                extra={\n                    <>\n                        <ModalFormUseForm\n                            TableName={`TemplateList-${type}`}\n                            width={600}\n                            title={\"新建模板\"}\n                            type={\"create\"}\n                            subForm={[\n                                {\n                                    component: <TemplateMForm/>,\n                                    label: \"\"\n                                },\n                            ]}\n                            dataSubmitter={(value: any) => {\n                                return mApi.createTemplate({type: type === \"io\" ? 0 : 2, ...value})\n                            }}\n                        />\n                    </>\n                }\n            >\n                <TableWithPagination\n                    name={`TemplateList-${type}`}\n                    columns={colData}\n                    API={(paras: any) => {\n                        return MApi.pageTemplateList({...paras, type: type === \"io\" ? 0 : 2})\n                    }}\n                    size={\"small\"}\n                    rowKey={\"id\"}\n                />\n            </Card>\n        </div>\n    )\n\n}\n\nexport default withTranslation()(withRouter(MJudgeTemplate))\n","import {Button, Card, Form, List, Space, Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {defaultPageSize} from \"../../../Config/constValue\";\nimport {UserState} from \"../../../Type/Iuser\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport Search from \"antd/es/input/Search\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck} from \"../../../Utils/empty\";\nimport {SizeType} from \"antd/lib/config-provider/SizeContext\";\nimport {ColumnsType} from \"antd/lib/table/interface\";\nimport {useForm} from \"antd/es/form/Form\";\n\nexport interface TableWithPaginationProps {\n    API: any                  // 表格查询数据的接口\n    size: SizeType            // 表格的大小\n    columns: ColumnsType<any> // 表格的列\n    name: string              // 表格名称\n    APIRowsTransForm?: any    // 针对API传输的数据进行转化的函数\n    search?: boolean          // 是否开启搜索功能\n    defaultPageSize?: number  // 表格默认的页大小\n\n    // 面向 可选择的行 开放的接口\n    // setDataSource?: any       // 输出当前表格的数据\n    rowKey?: any              // 作为 key 记录的值\n    rowSelection?: any        // 可选列的相关配置\n\n}\n\nconst TableWithPagination = (props: any) => {\n    const [total, setTotal] = useState<number>(0)                   // 项的总数\n    const [tableData, setTableDataX] = useState()                            // 表格核心数据\n    const [loading, setLoading] = useState(true)                    // 表格的加载状态\n    const [PageNow, setPageNow] = useState<number>(1)               // 当前的页码数\n    const [PageSize, setPageSize] = useState<number>(ck(props.defaultPageSize, defaultPageSize))         // 当前的页大小\n    const [searchText, setSearchText] = useState<string | undefined>()        // 搜索的文本\n    const [tableVersion, setTableVersion] = useState<number>(0)     // 表格版本（控制表格刷新）\n\n    const setTableData = (data: any) => {\n        setTableDataX(data)\n        // 若有 选中行 的相关配置，传递数据进行更新\n        if (props.setDataSource !== undefined && props.name !== undefined)\n            props.setDataSource(data, props.name)\n    }\n    // 这里的所有的参数都只能增量的修改，不能删除，删除需要手动更新 redux\n    const getInfo = (pageNow?: number, pageSize?: number, searchKey?: string, moreProps?: any) => {\n        const propsTableInfo = props.tableData[props.name]?.tableInfo\n        if (propsTableInfo !== undefined) {\n            if (moreProps === undefined && propsTableInfo.moreProps !== undefined){\n                form.setFieldsValue(propsTableInfo.moreProps)\n            }\n            pageNow = pageNow ?? propsTableInfo.pageNow\n            pageSize = pageSize ?? propsTableInfo.pageSize\n            searchKey = searchKey ?? propsTableInfo.searchKey\n            moreProps = moreProps ?? propsTableInfo.moreProps\n        }\n        let pn = pageNow ?? PageNow\n        let ps = pageSize ?? PageSize\n        let sk = searchKey ?? searchText\n        let fmp = moreProps ?? form.getFieldsValue()\n        setPageNow(pn)\n        setPageSize(ps)\n        setSearchText(sk)\n        setLoading(true)\n        props.API({\n            pageNow: pn,\n            pageSize: ps,\n            searchKey: sk,\n            ...fmp\n        }).then((data: any) => {\n            // console.log(\"data\", data)\n            if (data.rows === null) data.rows = []\n            if (props.APIRowsTransForm !== undefined) {\n                setTableData(props.APIRowsTransForm(data.rows))\n            } else setTableData(data.rows)\n            if (data.totalNum !== undefined && data.totalNum !== \"0\") {\n                setTotal(data.totalNum)\n                props.name && props.setTableInfo(props.name, {\n                    total: data.totalNum,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            } else {\n                setTotal(ps * data.totalPage);\n                props.name && props.setTableInfo(props.name, {\n                    total: ps * data.totalPage,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            }\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        form.setFieldsValue(props.initRequestProps)\n        getInfo()\n    }, [props.name])\n\n    // 带有表单的筛选\n    const [form] = useForm()\n    const onFinish = () => {\n        const values = form.getFieldsValue()\n        if (JSON.stringify(values) !== \"{}\")\n            getInfo(1, PageSize, undefined, values)\n    };\n    const onReset = () => {\n        const values = form.getFieldsValue()\n        form.resetFields();\n        const tf = props.tableData[props.name]?.tableInfo\n        props.name && props.setTableInfo(props.name, {\n            total: tf.total,\n            pageNow: tf.pageNow,\n            pageSize: tf.pageSize,\n            searchKey: tf.searchKey,\n            moreProps: undefined\n        })\n        const valuesAfter = form.getFieldsValue()\n        // 重置前后若发生改变，则重新加载表格\n        if (JSON.stringify(values) !== JSON.stringify(valuesAfter))\n            getInfo(1, PageSize, undefined, undefined)\n\n    };\n\n\n    useEffect(() => {\n        // 监听表格的版本变化，当版本变更时更新表格\n        const propsTableVersion = props.tableData[props.name]?.tableVersion\n        if (propsTableVersion !== undefined && tableVersion !== propsTableVersion) {\n            // 如果数据被外部应用更新，则用 redux 中的数据更新当前行\n            if (propsTableVersion < 0) {\n                setTableVersion(-propsTableVersion)\n                setTableDataX(props.tableData[props.name]?.dataSource)\n            } else {\n                // 否则，重新进行请求\n                setTableVersion(propsTableVersion)\n                const values = form.getFieldsValue()\n                getInfo(PageNow, PageSize, searchText, values)\n            }\n        }\n    }, [props.tableData, tableVersion])\n\n    return (\n        <>\n            {props.useList && (\n                <Card\n                    title={props.title}\n                    bordered={true}\n                    size={\"default\"}\n                    className={props.cardProps ?? \"zeroBodyPaddingLeft\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={props.t(\"searchUser\")}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            const values = form.getFieldsValue()\n                                            getInfo(1, PageSize, text, values)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        {props.useFormBtn && (\n                                            <Space style={{marginLeft: \"30px\"}} size={20}>\n                                                <Button type=\"primary\" onClick={onFinish}>\n                                                    筛选\n                                                </Button>\n                                                <Button htmlType=\"button\" onClick={onReset}>\n                                                    重置\n                                                </Button>\n                                            </Space>\n                                        )}\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <List\n                        grid={props.grid}\n                        itemLayout={\"vertical\"}\n                        loading={loading}\n                        size={props.size}\n                        dataSource={tableData}\n                        renderItem={props.renderItem}\n                        pagination={{\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            size: \"small\",\n                            hideOnSinglePage: true,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n            {!props.useList && (\n                <Card\n                    bordered={false}\n                    size={\"small\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={\"搜索\"}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            getInfo(1, PageSize, text)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        <Space style={{marginLeft: \"30px\"}} size={20}>\n                                            <Button type=\"primary\" onClick={onFinish}>\n                                                {props.t(\"filtering\")}\n                                            </Button>\n                                            <Button htmlType=\"button\" onClick={onReset}>\n                                                {props.t(\"Reset\")}\n                                            </Button>\n                                        </Space>\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <Table\n                        rowKey={props.rowKey}\n                        loading={loading}\n                        size={props.size}\n                        columns={props.columns}\n                        rowSelection={props.rowSelection}\n                        dataSource={tableData}\n                        pagination={props.pagination ?? {\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            hideOnSinglePage: false,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n        </>\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    const UState: UserState = state.UserReducer\n    const TState: TableState = state.TableReduce\n    return {\n        roles: UState.userInfo?.roles,\n        tableData: {...TState.tableData}\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setTableInfo: (name: string, data: any) => dispatch({\n        type: \"setTableInfo\",\n        name: name,\n        data: data\n    }),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: false})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(TableWithPagination)\n))\n\n","import React, {Dispatch, useEffect, useRef, useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {Button, Form, message, Modal} from \"antd\";\nimport {ButtonType} from \"antd/lib/button/button\";\nimport {EditOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport {ck, isValueEmpty} from \"../../../Utils/empty\";\nimport {useForm} from \"antd/es/form/Form\";\nimport {ProFormInstance, StepsForm} from \"@ant-design/pro-form\";\n\ninterface subFormType {\n    component: any\n    label: string\n}\n\ninterface ModalFormProps {\n    // 表单类型\n    type: \"create\" | \"update\" | \"batchUpdate\"\n    // 初始化数据，必须包含 initData 或 dataLoader 之一\n    initData?: { [key: string]: {} }\n    dataLoader?: () => Promise<any>   // 异步数据加载\n    dataSubmitter: (data: any) => Promise<any>\n    afterSubmit?: () => any                      // 提交完成之后的回调\n    updateAppendProps?: { [key: string]: any }\n\n    title: string           // 弹窗标题\n    TableName?: string      // 若有需要更新的表格，其名称\n    className?: any          // 类名\n    subForm: subFormType[]  // 子表单信息\n    btnProps?: any\n    layout?: any,\n    onClose?: any   // 关闭时进行回调\n}\n\nconst ModalForm = (props: ModalFormProps & any) => {\n\n    const [form] = useForm()\n    const formMapRef = useRef<React.MutableRefObject<ProFormInstance<any> | undefined>[]>([]);\n    const [formVis, setFormVis] = useState<boolean>(false)\n    const [saveInitData, setSaveInitData] = useState();\n    const [current, setCurrent] = useState<number>(0)\n    const [submitting, setSubmitting] = useState<boolean>(false);\n\n    const BtnTypeMap: { [key: string]: ButtonType } = {\n        create: \"primary\",\n        update: \"link\",\n        fork: \"link\",\n        batchUpdate: \"primary\"\n    }\n\n\n    const loadData = () => {\n        if (props.type === \"update\" || props.type === \"fork\") {\n            // 若初始化信息为空，则调用数据加载器进行异步数据加载\n            if (props.initData === undefined) {\n                const hied = message.loading({\n                    content: \"加载中\",\n                    duration: 0,\n                })\n                if (props.dataLoader === undefined) {\n                    hied()\n                    message.error(\"未定义数据加载器\")\n                    return\n                }\n                props.dataLoader && props.dataLoader().then((data: any) => {\n                    // console.log(\"dataLoaderData\", data)\n                    setSaveInitData(data)\n                    // if (props.subForm.length !== 1) {\n                    // } else form.setFieldsValue(data)\n                    hied()\n                    setFormVis(true)\n                }).catch(() => {\n                    hied()\n                })\n            } else {\n                // 否则直接进行数据加载\n                // console.log(\"initData\",props.initData)\n                setSaveInitData(props.initData)\n                setFormVis(true)\n            }\n        } else if (props.type === \"create\") {\n            if (props.initData !== undefined) {\n                setSaveInitData(props.initData)\n            }\n            setFormVis(true)\n        } else {\n            setFormVis(true)\n        }\n    }\n\n    // 当表单的可见性发生改变时，维护表单信息\n    useEffect(() => {\n        // 延迟向表单注入信息\n        setTimeout(() => {\n            !isValueEmpty(formMapRef.current) && formMapRef.current.forEach((formInstanceRef) => {\n                formInstanceRef.current?.setFieldsValue(saveInitData);\n            });\n            form && form.setFieldsValue(saveInitData)\n        }, 100)\n\n        // 当表单消失时，清除相关数据\n        if (!formVis) {\n            setCurrent(0)\n            formMapRef.current.forEach((formInstanceRef) => {\n                formInstanceRef.current?.resetFields()\n            });\n            props.formName && props.addManageInitData(props.formName, undefined)\n        }\n    }, [formVis, saveInitData])\n\n    useEffect(() => {\n        props.formName && props.addManageInitData(props.formName, saveInitData)\n    }, [saveInitData])\n\n    // 提交数据\n    const submitData = (values: any) => {\n        const submit = (value: any) => {\n            // console.log(\"inner\", value)\n            setSubmitting(true);\n            // 在提交表单数据之前，追加数据\n            props.updateAppendProps && Object.assign(value, props.updateAppendProps)\n            props.dataSubmitter(value).then((res: any) => {\n                // 当数据绑定表格时，更新表格数据\n                props.TableName && props.addTableVersion(props.TableName)\n                props.afterSubmit && props.afterSubmit(res)\n                props.onClose && props.onClose()\n                setFormVis(false)\n                message.success(\"成功\")\n            }).finally(() => {\n                setSubmitting(false);\n            })\n        }\n\n        if (props.subForm.length === 1) {\n            // 只有一页的表单，需要手动进行验证\n            // console.log(form)\n            form.validateFields().then((value) => {\n                submit(value)\n            }).catch(() => {\n                message.error('表单不完整')\n            })\n        } else submit(values)\n    }\n\n    return (\n        <>\n            <Button\n                {...props.btnProps}\n                type={ck(props.btnType, BtnTypeMap[props.type])}\n                onClick={loadData}\n                style={\n                    (props.type === \"fork\" || props.type === \"update\" || props.btnType === \"link\") ? {\n                        paddingLeft: 5,\n                        paddingRight: 5\n                    } : undefined\n                }\n            >\n                {(() => {\n                    if (props.btnIcon !== false) {\n                        if (props.type === \"create\") return <PlusOutlined/>\n                        if (props.type === \"batchUpdate\") return <EditOutlined/>\n                    }\n                })()}\n                {(() => {\n                    if (props.btnName !== undefined)\n                        return props.btnName\n                    switch (props.type) {\n                        case \"create\":\n                            return props.t(\"create\")\n                        case \"update\":\n                            return props.t(\"Edit\")\n                        case \"fork\":\n                            return \"克隆\"\n                        default:\n                            return \"批量修改\"\n                    }\n                })()}\n            </Button>\n            {props.subForm.length === 1 && (\n                <Modal\n                    width={props.width}\n                    style={{minWidth: props.width}}\n                    destroyOnClose={true}\n                    title={props.title}\n                    className={props.className}\n                    visible={formVis}\n                    maskClosable={false}\n                    onCancel={() => {\n                        props.onClose && props.onClose()\n                        setFormVis(false)\n                    }}\n                    footer={[\n                        <Button type=\"primary\" key=\"submit\" onClick={submitData} loading={submitting}>\n                            {props.t(\"Submit\")}\n                        </Button>\n                    ]}\n                >\n                    <Form\n                        form={form}\n                        layout={props.layout ?? \"vertical\"}\n                        initialValues={props.initData}\n                        scrollToFirstError\n                        preserve={false}\n                    >\n                        {props.subForm[0].component}\n                    </Form>\n                </Modal>\n            )}\n            {props.subForm.length !== 1 && (\n                <StepsForm\n                    current={current}\n                    onCurrentChange={(currentPage: number) => {\n                        setCurrent(currentPage)\n                    }}\n                    formMapRef={formMapRef}\n                    onFinish={async (values) => {\n                        submitData(values)\n                    }}\n                    submitter={{\n                        submitButtonProps: {\n                            loading: submitting\n                        }\n                    }}\n                    stepsFormRender={(dom, submitter) => {\n                        return (\n                            <Modal\n                                destroyOnClose={true}\n                                title={props.title}\n                                className={props.className}\n                                visible={formVis}\n                                maskClosable={false}\n                                width={props.width ?? 1200}\n                                style={{minWidth: props.width}}\n                                onCancel={() => {\n                                    props.onClose && props.onClose()\n                                    setFormVis(false)\n                                }}\n                                footer={submitter}\n                            >\n                                {dom}\n                            </Modal>\n                        );\n                    }}\n                >\n                    {props.subForm.map((item: any, index: number) => {\n                        return (\n                            <StepsForm.StepForm\n                                layout={props.layout ?? \"vertical\"}\n                                name={\"step\" + index}\n                                title={item.label}\n                                onFinish={async () => {\n                                    return true;\n                                }}\n                            >\n                                {item.component}\n                            </StepsForm.StepForm>\n                        )\n                    })}\n                </StepsForm>\n\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = () => {\n    return {}\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    addTableVersion: (name: string) => dispatch({type: \"addTableVersion\", name: name}),\n    addManageInitData: (key: string, data: any) => dispatch({type: \"addManageInitData\", key: key, data: data})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(ModalForm)\n))\n"],"sourceRoot":""}