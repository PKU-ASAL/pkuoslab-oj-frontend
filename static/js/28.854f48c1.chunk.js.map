{"version":3,"sources":["Component/submission/SubmissionList/ModalSubmissionList.tsx","Component/submission/SubmissionList/SubmissionList.tsx","Component/contest/Status.tsx","Component/common/Table/TableWithPagination.tsx","Component/common/Table/TableWithAllData.tsx","Component/common/Table/TableWithSelection.tsx"],"names":["withTranslation","withRouter","props","ModalVis","setModalVis","useState","btnProps","onClick","btnText","width","visible","footer","onCancel","connect","state","TState","TableReduce","UState","UserReducer","tableData","roles","userInfo","isLogin","dispatch","addTableVersion","name","type","setSelectedRowKeys","data","setDataSource","add","setTopSubmission","submissionID","submissionInfo","setSubmissionModalVis","webSocketOpen","setWebSocketOpen","webSocketQueryList","setWebSocketQueryList","refreshDisable","setRefreshDisable","selectedRowKeys","ck","dataSource","showSubmission","record","submissionId","title","problemTitle","TimeLimit","timeLimit","MemoryLimit","memoryLimit","scoreMod","undefined","sumScore","testcaseMod","QuerySubmissionAPI","columns","t","dataIndex","key","render","text","style","cursor","TestCase","caseType","StateList","indexOf","SubmissionMap","append","RunningStep","checkpointNum","publicCheckpointNum","Math","floor","moment","format","fromNow","columnsAll","size","problemCodeRender","SyncJudging","open","dataHandle","submissionIdHex","submissionVersion","checkpointIndex","judgeResult","judgeScore","usedTime","usedMemory","dt","Index","findIndex","value","isValueEmpty","cur_cpt","Set","result","toString","localStorage","setItem","score","runningNumber","x","parseInt","queryList","lessInfo","minWidth","className","extra","judgeAuth","ReJudge","API","cApi","rejudge","afterSuccess","icon","ReloadOutlined","message","success","setTimeout","disabled","actions","block","TableWithSelection","disableSelection","defaultPageSize","showSizeChanger","pagination","getForm","useForm","onFinish","Item","label","onPressEnter","e","allowClear","onChange","RunningResultList","map","Option","rowKey","v","length","match","charCodeAt","APIRowsTransForm","push","submitTime","gmtCreate","contestId","params","getContestSubmissionList","getContestSubmissionInfo","InvalidateAPI","invalidateContestSubmission","history","UrlPrefix","String","fromCharCode","setTableInfo","total","setTotal","setTableDataX","loading","setLoading","PageNow","setPageNow","PageSize","setPageSize","searchText","setSearchText","tableVersion","setTableVersion","setTableData","getInfo","pageNow","pageSize","searchKey","moreProps","propsTableInfo","tableInfo","form","setFieldsValue","pn","ps","sk","fmp","getFieldsValue","then","rows","totalNum","totalPage","useEffect","initRequestProps","values","JSON","stringify","onReset","resetFields","tf","valuesAfter","propsTableVersion","useList","bordered","cardProps","search","placeholder","onSearch","enterButton","useFormBtn","marginLeft","htmlType","grid","itemLayout","renderItem","page","current","hideOnSinglePage","showQuickJumper","showLessItems","pageSizeOptions","rowSelection","React","memo","DragHandle","SortableHandle","color","SortableItem","SortableElement","XSortableContainer","SortableContainer","onSortEnd","oldIndex","newIndex","arrayMoveImmutable","afterDrag","sortColumns","useDrag","concat","components","body","wrapper","useDragHandle","disableAutoscroll","helperClass","row","restProps","index","nextProps","updateTrick","Component","this","componentDidMount","selections","onSelect","changeableRowKeys","newSelectedRowKeys","filter","includes","uesAlldata"],"mappings":"4TAoCeA,oBAAkBC,aA9BJC,IACzB,MAAOC,EAAUC,GAAeC,oBAAkB,GAElD,OACI,qCACI,cAAC,IAAD,IACQH,EAAMI,SACVC,QAAS,KACLH,GAAY,IAHpB,SAMKF,EAAMM,UAEX,cAAC,IAAD,CACIC,MAAO,KACPC,QAASP,EACTQ,QAAQ,EACRC,SAAU,KACNR,GAAY,IALpB,SAQI,cAAC,EAAD,IACQF,aCsYTW,uBA3BUC,IAAgB,IAAD,EACpC,MAAMC,EAAqBD,EAAME,YAC3BC,EAAoBH,EAAMI,YAChC,MAAO,CACHC,UAAWJ,EAAOI,UAClBC,MAAK,UAAEH,EAAOI,gBAAT,aAAE,EAAiBD,MACxBE,QAASL,EAAOK,YAIIC,IAAD,CACvBC,gBAAkBC,GAAiBF,EAAS,CACxCG,KAAM,kBACND,KAAMA,IAEVE,mBAAoB,CAACC,EAAmBH,IACpCF,EAAS,CAACG,KAAM,qBAAsBE,KAAMA,EAAMH,KAAMA,IAC5DI,cAAe,CAACD,EAAWH,IACvBF,EAAS,CAACG,KAAM,gBAAiBE,KAAMA,EAAMH,KAAMA,EAAMK,KAAK,IAClEC,iBAAkB,CAACC,EAAsBC,IAA0CV,EAAS,CACxFG,KAAM,mBACNM,aAAcA,EACdC,eAAgBA,IAEpBC,sBAAwBN,GAAkBL,EAAS,CAACG,KAAM,wBAAyBE,KAAMA,OAG9Ef,CAGbb,cACEC,aAnZoBC,IAAgB,IAAD,IAInC,MAAOiC,EAAeC,GAAoB/B,oBAAkB,IAErDgC,EAAoBC,GAAyBjC,mBAAmB,KAChEkC,EAAgBC,GAAqBnC,oBAAkB,GAExDoC,EAAkBC,YAAE,UAACxC,EAAMiB,UAAUjB,EAAMuB,aAAvB,aAAC,EAA6BgB,gBAAiB,IACnEE,EAAaD,YAAE,UAACxC,EAAMiB,UAAUjB,EAAMuB,aAAvB,aAAC,EAA6BkB,WAAY,IA2DzDC,EAAkBC,IACpB3C,EAAM6B,iBAAiBc,EAAOC,aAAc,CACxCC,MAAOF,EAAOG,aACdC,UAAWJ,EAAOK,UAClBC,YAAaN,EAAOO,YACpBC,cAA8BC,IAApBT,EAAOU,SAAyB,UAAY,OACtDA,SAAUV,EAAOU,SACjBC,YAAa,OACbC,mBAAoBvD,EAAMuD,qBAE9BvD,EAAMgC,uBAAsB,IAG1BwB,EAAU,CACZ,CACIX,MAAO7C,EAAMyD,EAAE,WACfC,UAAW,SACXC,IAAK,SACLC,OAAQ,CAACC,EAAWlB,IAEZ,qBAAKmB,MAAO,CAACC,OAAQ,WAAY1D,QAAS,KACtCqC,EAAeC,IADnB,SAGI,cAACqB,EAAA,EAAD,CACIxC,KAAM,OACNyC,SAAUC,IAAUC,QAAQC,IAAcP,IAC1CQ,OACa,OAATR,EACI,IAAMlB,EAAO2B,YAAc,KAAO3B,EAAO4B,cAAgB5B,EAAO6B,qBAAuB,IACrF,QAQ9B,CACI3B,MAAO7C,EAAMyD,EAAE,SACfC,UAAW,QACXC,IAAK,QACLC,OAAQ,CAACC,EAAclB,SACKS,IAApBT,EAAOU,SACAQ,EACJY,KAAKC,MAAMb,EAAOlB,EAAOU,SAAW,KAAO,KAG1D,CACIR,MAAO7C,EAAMyD,EAAE,kBACfC,UAAW,aACXC,IAAK,aACLC,OAASC,GAED,cAAC,IAAD,CAAShB,MAAO8B,IAAOd,GAAMe,OAAO,uBAApC,SACI,+BAAOD,IAAOd,GAAMgB,gBAOlCC,EAAa,CACf,CACIjC,MAAO,KACPa,UAAW,eACXC,IAAK,eACLC,OAAQ,CAACC,EAAWlB,IACT,cAAC,IAAD,CAAQnB,KAAM,OAAQuD,KAAM,QAAS1E,QAAS,KACjDqC,EAAeC,IADZ,SAGFkB,KAIb,CACIhB,MAAO7C,EAAMyD,EAAE,YACfC,UAAW,WACXC,IAAK,YAET,CACId,MAAO7C,EAAMyD,EAAE,cACfC,UAAW,cACXC,IAAK,cACLC,OAAQ5D,EAAMgF,mBAElB,CACInC,MAAO7C,EAAMyD,EAAE,eACfC,UAAW,eACXC,IAAK,gBAET,CACId,MAAO7C,EAAMyD,EAAE,WACfC,UAAW,SACXC,IAAK,SACLpD,MAAO,IACPqD,OAAQ,CAACC,EAAWlB,IAEZ,qBAAKmB,MAAO,CAACC,OAAQ,WAAY1D,QAAS,KACtCqC,EAAeC,IADnB,SAGI,cAACqB,EAAA,EAAD,CACIxC,KAAM,OACNyC,SAAUC,IAAUC,QAAQC,IAAcP,IAC1CQ,OACa,OAATR,EACI,IAAMlB,EAAO2B,YAAc,KAAO3B,EAAO4B,cAAgB5B,EAAO6B,qBAAuB,IACvF,QAO5B,CACI3B,MAAO7C,EAAMyD,EAAE,SACfC,UAAW,QACXC,IAAK,QACLC,OAAQ,CAACC,EAAclB,SACKS,IAApBT,EAAOU,SACAQ,EACJY,KAAKC,MAAMb,EAAOlB,EAAOU,SAAW,KAAO,KAG1D,CACIR,MAAO7C,EAAMyD,EAAE,YACfC,UAAW,qBACXC,IAAK,sBAET,CACId,MAAO7C,EAAMyD,EAAE,eACfC,UAAW,aACXC,IAAK,aACLC,OAASC,GACEA,EAAO,OAGtB,CACIhB,MAAO7C,EAAMyD,EAAE,aACfC,UAAW,WACXC,IAAK,WACLC,OAASC,GACEA,EAAO,OAGtB,CACIhB,MAAO7C,EAAMyD,EAAE,kBACfC,UAAW,aACXC,IAAK,aACLC,OAASC,GAED,cAAC,IAAD,CAAShB,MAAO8B,IAAOd,GAAMe,OAAO,uBAApC,SACI,+BAAOD,IAAOd,GAAMgB,gBAwDxC,OACI,mCACI,cAAC,IAAD,CACIhC,MACI,eAAC,IAAD,gBACqBO,IAAhBpD,EAAM6C,MAAsB7C,EAAM6C,MAAQ7C,EAAMyD,EAAE,oBACnD,cAACwB,EAAA,EAAD,CACIC,KAAMjD,EACNkD,WAhRHzD,IAEjB,MAAM0D,EAAkB1D,EAAK,GACvB2D,EAAoB3D,EAAK,GAEzB4D,EAAkB5D,EAAK,GAEvB6D,EAAc7D,EAAK,GACnB8D,EAAa9D,EAAK,GAClB+D,EAAW/D,EAAK,GAChBgE,EAAahE,EAAK,GAExB,IAAIiE,EAAKlD,EACT,MAAMmD,EAAQD,EAAGE,WAAWC,GAAeA,EAAMlD,eAAiBwC,IAClE,IAAe,IAAXQ,EAAJ,CASA,GANIG,YAAaJ,EAAGC,GAAOI,WACvBL,EAAGC,GAAOI,QAAU,IAAIC,KAKxBX,EAAkB,EAAG,CACrBK,EAAGC,GAAOM,OAASZ,EAAgBa,YAEV,IAArBb,IACAc,aAAaC,QAAS,qBAAoBjB,IAAoB,GAAEC,KAChEM,EAAGC,GAAOM,OAASX,EACnBI,EAAGC,GAAOU,MAAQd,EAClBG,EAAGC,GAAOH,SAAWA,EACrBE,EAAGC,GAAOF,WAAaA,GAG3B,IAAIa,EAAgB,EACpB,IAAK,MAAMC,KAAKb,EAAQc,SAASD,EAAEN,SAAW,IAAGK,GAAiB,GAC5C,IAAlBA,GAAqBrE,GAAiB,QAE1CyD,EAAGC,GAAOI,QAAQpE,IAAI0D,GACtBK,EAAGC,GAAOtB,YAAcqB,EAAGC,GAAOI,QAAQjB,KAC1CY,EAAGC,GAAOU,OAASd,EAcvBxF,EAAM2B,cAAcgE,EAAI3F,EAAMuB,QA2NVmF,UAAWvE,OAGvB2B,MAAO9D,EAAM2G,SAAW,GAAK,CAACC,SAAU,MACxCC,UAAW7G,EAAM2G,SAAW,mBAAqB,GACjDG,MACI,eAAC,IAAD,YACwB,IAAnB9G,EAAM2G,UAAqBI,YAAU/G,EAAMkB,MAAO,CAAC,QAAS,gBACzD,cAAC8F,EAAA,EAAD,CACIC,IAAKC,IAAKC,QACVzF,KAAMa,EACN6E,aAAc,KACVpH,EAAMsB,gBAAgBtB,EAAMuB,MAC5BvB,EAAMyB,mBAAmB,GAAIzB,EAAMuB,SAI/C,cAAC,IAAD,CACI8F,KAAM,cAACC,EAAA,EAAD,IACNjH,QAAS,KACLiC,GAAkB,GAClBtC,EAAMsB,gBAAgBtB,EAAMuB,MAC5BgG,IAAQC,QAAQxH,EAAMyD,EAAE,wBACxBgE,YAAW,KACPnF,GAAkB,KACnB,MAEPoF,SAAUrF,EAVd,SAYKrC,EAAMyD,EAAE,gBAIrBkE,QAAU3H,EAAM2G,UAAY3G,EAAMoB,QAAW,CACzC,8BACKpB,EAAM2G,UAAY3G,EAAMoB,SACrB,cAAC,EAAD,CACIhB,SAAU,CAACoB,KAAM,OAAQoG,OAAO,GAChCtH,QAASN,EAAMyD,EAAE,sBACjBlC,KAAM,sBAAwBvB,EAAMuB,KACpC0F,IAAKjH,EAAMiH,IACX1D,mBAAoBvD,EAAMuD,6BAItCH,EApDR,SAsDI,cAACyE,EAAA,EAAD,CACIC,iBAAkB9H,EAAM2G,WAAaI,YAAU/G,EAAMkB,MAAO,CAAC,QAAS,eACtE6G,gBAAiB/H,EAAM2G,SAAW,OAAIvD,EACtC4E,iBAAiBhI,EAAM2G,eAAmBvD,EAC1C6E,YAAYjI,EAAM2G,eAAmBvD,EACrCI,QAASxD,EAAM2G,SAAWnD,EAAUsB,EACpCoD,SAA2B,IAAlBlI,EAAMmI,QA/GdC,GAET,eAAC,IAAD,CAAOrD,KAAM,GAAb,UACI,cAAC,IAAKsD,KAAN,CAAWC,MAAOtI,EAAMyD,EAAE,YAAalC,KAAM,WAA7C,SACI,cAAC,IAAD,CACIgH,aAAeC,IACXJ,KAEJK,YAAU,MAGlB,cAAC,IAAKJ,KAAN,CAAWC,MAAOtI,EAAMyD,EAAE,cAAelC,KAAM,cAA/C,SACI,cAAC,IAAD,CACIgH,aAAeC,IACXJ,KAEJK,YAAU,MAGlB,cAAC,IAAKJ,KAAN,CAAWC,MAAOtI,EAAMyD,EAAE,eAAgBlC,KAAM,cAAhD,SACI,cAAC,IAAD,CAAQmH,SAAUN,EAAUK,YAAU,EAAC3E,MAAO,CAACvD,MAAO,KAAtD,SAEQoI,IAAkBC,KAAK9C,GACZ,cAAC,IAAO+C,OAAR,CAAe/C,MAAOW,SAASX,GAA/B,SACH,cAAC9B,EAAA,EAAD,CAAUxC,KAAM,OACNyC,SAAUC,IAAUC,QAAQC,IAAc0B,sBAsFxB1C,EAC5C7B,KAAMvB,EAAMuB,KACZwD,KAAM,QACN+D,OAAQ,eACR7B,IAhFHvF,IACT,GAAI,gBAAiBA,IAASqE,YAAarE,EAAI,aAAkB,CAC7D,IAAIqH,EAAYrH,EAAI,YACH,IAAbqH,EAAEC,QACyB,OAAvBD,EAAEE,MAAM,aAAqBF,GAAKA,EAAEG,WAAW,GAAK,IAAIA,WAAW,GAAK,GAAG/C,YACpD,OAAvB4C,EAAEE,MAAM,aAAqBF,GAAKA,EAAEG,WAAW,GAAK,IAAIA,WAAW,GAAK,GAAG/C,aAC9C,OAA1B4C,EAAEE,MAAM,gBACfF,EAAI,SAAWA,GAEnBrH,EAAI,YAAkBqH,EAE1B,OAAO/I,EAAMiH,IAAIvF,IAsELyH,iBAAmBrD,IACXC,YAAaD,KAAQA,EAAQ,IACjC,IAAI3D,EAAqB,GACrBT,EAAY,GAChB,IAAK,MAAM8E,KAAKV,EACRU,EAAEjB,aAAe,GAAGpD,EAAmBiH,KAAK5C,EAAE5D,cAClDlB,EAAK0H,KAAK,IACH5C,EACHF,MAAOE,EAAEhB,WACTlB,YAAa,EACb4B,OAAQM,EAAEjB,YAAYY,WAEtB9C,SAAUmD,EAAEnD,SACZgG,WAAY5C,SAASD,EAAE8C,aAO/B,OAJkC,IAA9BnH,EAAmB6G,SACnB9G,GAAiB,GACjBE,EAAsBD,IAEnBT,e,kCC9X/B,6EAkDe5B,wBAAkBC,aA1CjBC,IAEZ,MAAMuJ,EAAYvJ,EAAMiJ,MAAMO,OAAOD,UAarC,OACI,mCACI,cAAC,IAAD,CACIhI,KAAM,qBAAuBgI,EAC7BpB,SAAS,EACTlB,IAhBevF,GAChBwF,IAAKuC,yBAAyB,IAC9B/H,EAEH6H,UAAWA,IAaPhG,mBAVgBX,GACjBsE,IAAKwC,yBAAyB,CAACH,UAAWA,EAAW3G,aAAcA,IAalE+G,cAAgBjI,GACLwF,IAAK0C,4BAA4B,CAAChH,aAAclB,EAAI,aAAkB6H,UAAWA,IAE5FvE,kBAAoBnB,GAEZ,cAAC,IAAD,CAAQrC,KAAM,OAAQuD,KAAM,QAAS1E,QAAS,KAC3CL,EAAM6J,QAAQT,KAAKU,IAAY,YAAaP,EAAY,YAAc1F,IADzE,SAGKkG,OAAOC,aAAa,IAAId,WAAW,GAAKzC,SAAS5C,GAAQ,c,iCCzCtF,oIA2SelD,iBAnBUC,IAAgB,IAAD,EACpC,MAAMG,EAAoBH,EAAMI,YAC1BH,EAAqBD,EAAME,YACjC,MAAO,CACHI,MAAK,UAAEH,EAAOI,gBAAT,aAAE,EAAiBD,MACxBD,UAAW,IAAIJ,EAAOI,eAIFI,IAAD,CACvB4I,aAAc,CAAC1I,EAAcG,IAAcL,EAAS,CAChDG,KAAM,eACND,KAAMA,EACNG,KAAMA,IAEVC,cAAe,CAACD,EAAWH,IACvBF,EAAS,CAACG,KAAM,gBAAiBE,KAAMA,EAAMH,KAAMA,EAAMK,KAAK,OAGvDjB,CAGbb,cACEC,aAjRyBC,IAAgB,IAAD,IACxC,MAAOkK,EAAOC,GAAYhK,mBAAiB,IACpCc,EAAWmJ,GAAiBjK,sBAC5BkK,EAASC,GAAcnK,oBAAS,IAChCoK,EAASC,GAAcrK,mBAAiB,IACxCsK,EAAUC,GAAevK,mBAAiBqC,YAAGxC,EAAM+H,gBAAiBA,OACpE4C,EAAYC,GAAiBzK,sBAC7B0K,EAAcC,GAAmB3K,mBAAiB,GAEnD4K,EAAgBrJ,IAClB0I,EAAc1I,QAEc0B,IAAxBpD,EAAM2B,oBAA8CyB,IAAfpD,EAAMuB,MAC3CvB,EAAM2B,cAAcD,EAAM1B,EAAMuB,OAGlCyJ,EAAU,CAACC,EAAkBC,EAAmBC,EAAoBC,KAAqB,IAAD,UAC1F,MAAMC,EAAc,UAAGrL,EAAMiB,UAAUjB,EAAMuB,aAAzB,aAAG,EAA6B+J,UACjB,IAAD,aAAXlI,IAAnBiI,SACkBjI,IAAdgI,QAAwDhI,IAA7BiI,EAAeD,WAC1CG,EAAKC,eAAeH,EAAeD,WAEvCH,EAAO,UAAGA,SAAH,QAAcI,EAAeJ,QACpCC,EAAQ,UAAGA,SAAH,QAAeG,EAAeH,SACtCC,EAAS,UAAGA,SAAH,QAAgBE,EAAeF,UACxCC,EAAS,UAAGA,SAAH,QAAgBC,EAAeD,WAE5C,IAAIK,EAAE,UAAGR,SAAH,QAAcV,EAChBmB,EAAE,UAAGR,SAAH,QAAeT,EACjBkB,EAAE,UAAGR,SAAH,QAAgBR,EAClBiB,EAAG,UAAGR,SAAH,QAAgBG,EAAKM,iBAC5BrB,EAAWiB,GACXf,EAAYgB,GACZd,EAAce,GACdrB,GAAW,GACXtK,EAAMiH,IAAI,CACNgE,QAASQ,EACTP,SAAUQ,EACVP,UAAWQ,KACRC,IACJE,MAAMpK,IAEa,OAAdA,EAAKqK,OAAerK,EAAKqK,KAAO,SACL3I,IAA3BpD,EAAMmJ,iBACN4B,EAAa/K,EAAMmJ,iBAAiBzH,EAAKqK,OACtChB,EAAarJ,EAAKqK,WACH3I,IAAlB1B,EAAKsK,UAA4C,MAAlBtK,EAAKsK,UACpC7B,EAASzI,EAAKsK,UACdhM,EAAMuB,MAAQvB,EAAMiK,aAAajK,EAAMuB,KAAM,CACzC2I,MAAOxI,EAAKsK,SACZf,QAASQ,EACTP,SAAUQ,EACVP,UAAWQ,EACXP,UAAWQ,MAGfzB,EAASuB,EAAKhK,EAAKuK,WACnBjM,EAAMuB,MAAQvB,EAAMiK,aAAajK,EAAMuB,KAAM,CACzC2I,MAAOwB,EAAKhK,EAAKuK,UACjBhB,QAASQ,EACTP,SAAUQ,EACVP,UAAWQ,EACXP,UAAWQ,KAGnBtB,GAAW,OAInB4B,qBAAU,KACNX,EAAKC,eAAexL,EAAMmM,kBAC1BnB,MACD,CAAChL,EAAMuB,OAGV,MAAOgK,GAAQpD,cACTC,EAAW,KACb,MAAMgE,EAASb,EAAKM,iBACW,OAA3BQ,KAAKC,UAAUF,IACfpB,EAAQ,EAAGP,OAAUrH,EAAWgJ,IAElCG,EAAU,KAAO,IAAD,EAClB,MAAMH,EAASb,EAAKM,iBACpBN,EAAKiB,cACL,MAAMC,EAAE,UAAGzM,EAAMiB,UAAUjB,EAAMuB,aAAzB,aAAG,EAA6B+J,UACxCtL,EAAMuB,MAAQvB,EAAMiK,aAAajK,EAAMuB,KAAM,CACzC2I,MAAOuC,EAAGvC,MACVe,QAASwB,EAAGxB,QACZC,SAAUuB,EAAGvB,SACbC,UAAWsB,EAAGtB,UACdC,eAAWhI,IAEf,MAAMsJ,EAAcnB,EAAKM,iBAErBQ,KAAKC,UAAUF,KAAYC,KAAKC,UAAUI,IAC1C1B,EAAQ,EAAGP,OAAUrH,OAAWA,IAsBxC,OAjBA8I,qBAAU,KAAO,IAAD,EAEZ,MAAMS,EAAiB,UAAG3M,EAAMiB,UAAUjB,EAAMuB,aAAzB,aAAG,EAA6BsJ,aACvD,QAA0BzH,IAAtBuJ,GAAmC9B,IAAiB8B,EAEpD,GAAIA,EAAoB,EAAG,CAAC,IAAD,EACvB7B,GAAiB6B,GACjBvC,EAAa,UAACpK,EAAMiB,UAAUjB,EAAMuB,aAAvB,aAAC,EAA6BkB,gBACxC,CAEHqI,EAAgB6B,GAChB,MAAMP,EAASb,EAAKM,iBACpBb,EAAQT,EAASE,EAAUE,EAAYyB,MAGhD,CAACpM,EAAMiB,UAAW4J,IAGjB,qCACK7K,EAAM4M,SACH,cAAC,IAAD,CACI/J,MAAO7C,EAAM6C,MACbgK,UAAU,EACV9H,KAAM,UACN8B,UAAS,UAAE7G,EAAM8M,iBAAR,QAAqB,sBAC9BhG,QACsB,IAAjB9G,EAAM+M,aAAqC3J,IAAlBpD,EAAMkI,UAC5B,sCACsB,IAAjBlI,EAAM+M,QACH,cAAC,IAAD,CAEIC,YAAahN,EAAMyD,EAAE,cACrBwJ,SAAWpJ,IACP+G,EAAc/G,GACd2G,EAAW,GACX,MAAM4B,EAASb,EAAKM,iBACpBb,EAAQ,EAAGP,EAAU5G,EAAMuI,IAE/Bc,aAAW,EACXpJ,MAAO,CAACvD,MAAO,MATV,eAYM6C,IAAlBpD,EAAMkI,SACH,eAAC,IAAD,CAAMqD,KAAMA,EAAZ,UACKvL,EAAMkI,QAAQE,GACdpI,EAAMmN,YACH,eAAC,IAAD,CAAOrJ,MAAO,CAACsJ,WAAY,QAASrI,KAAM,GAA1C,UACI,cAAC,IAAD,CAAQvD,KAAK,UAAUnB,QAAS+H,EAAhC,0BAGA,cAAC,IAAD,CAAQiF,SAAS,SAAShN,QAASkM,EAAnC,mCA9BhC,SAyCI,cAAC,IAAD,CACIe,KAAMtN,EAAMsN,KACZC,WAAY,WACZlD,QAASA,EACTtF,KAAM/E,EAAM+E,KACZtC,WAAYxB,EACZuM,WAAYxN,EAAMwN,WAClBvF,WAAY,CACRS,SAAU,CAAC+E,EAAMvC,KACbF,EAAQyC,EAAMvC,IAElBwC,QAASnD,EACTW,SAAUT,EACVP,MAAOA,EACPnF,KAAM,QACN4I,kBAAkB,EAClBC,iBAAiB,EACjBC,eAAe,EACf7F,gBAAiBxF,YAAGxC,EAAMgI,iBAAiB,GAC3C8F,gBAAiB,CAAC,IAAK,KAAM,KAAM,KAAM,YAKvD9N,EAAM4M,SACJ,cAAC,IAAD,CACIC,UAAU,EACV9H,KAAM,QACN+B,QACsB,IAAjB9G,EAAM+M,aAAqC3J,IAAlBpD,EAAMkI,UAC5B,sCACsB,IAAjBlI,EAAM+M,QACH,cAAC,IAAD,CAEIC,YAAa,eACbC,SAAWpJ,IACP+G,EAAc/G,GACd2G,EAAW,GACXQ,EAAQ,EAAGP,EAAU5G,IAEzBqJ,aAAW,EACXpJ,MAAO,CAACvD,MAAO,MARV,eAWM6C,IAAlBpD,EAAMkI,SACH,eAAC,IAAD,CAAMqD,KAAMA,EAAZ,UACKvL,EAAMkI,QAAQE,GACf,eAAC,IAAD,CAAOtE,MAAO,CAACsJ,WAAY,QAASrI,KAAM,GAA1C,UACI,cAAC,IAAD,CAAQvD,KAAK,UAAUnB,QAAS+H,EAAhC,SACKpI,EAAMyD,EAAE,eAEb,cAAC,IAAD,CAAQ4J,SAAS,SAAShN,QAASkM,EAAnC,SACKvM,EAAMyD,EAAE,oBA3BzC,SAoCI,cAAC,IAAD,CACIqF,OAAQ9I,EAAM8I,OACduB,QAASA,EACTtF,KAAM/E,EAAM+E,KACZvB,QAASxD,EAAMwD,QACfuK,aAAc/N,EAAM+N,aACpBtL,WAAYxB,EACZgH,WAAU,UAAEjI,EAAMiI,kBAAR,QAAsB,CAC5BS,SAAU,CAAC+E,EAAMvC,KACbF,EAAQyC,EAAMvC,IAElBwC,QAASnD,EACTW,SAAUT,EACVP,MAAOA,EACPyD,kBAAkB,EAClBC,iBAAiB,EACjBC,eAAe,EACf7F,gBAAiBxF,YAAGxC,EAAMgI,iBAAiB,GAC3C8F,gBAAiB,CAAC,IAAK,KAAM,KAAM,KAAM,oB,iCC9QrE,2FAuJeE,QAAMC,KAAKtN,aAjBDC,IAEd,CACHK,UAAW,IAFYL,EAAME,YAEPG,eAIFI,IAAD,CACvB4I,aAAc,CAAC1I,EAAcG,IAAcL,EAAS,CAChDG,KAAM,eACND,KAAMA,EACNG,KAAMA,IAEVC,cAAe,CAACD,EAAWH,IACvBF,EAAS,CAACG,KAAM,gBAAiBE,KAAMA,EAAMH,KAAMA,EAAMK,KAAK,OAG5CjB,CAGpBb,cACEC,aAnIkBC,IACtB,MAAOiB,EAAWmJ,GAAiBjK,mBAAS,KACrCkK,EAASC,GAAcnK,oBAAS,IAChC0K,EAAcC,GAAmB3K,mBAAiB,GAInD4K,EAAgBrJ,IAClB0I,EAAc1I,QAEc0B,IAAxBpD,EAAM2B,oBAA8CyB,IAAfpD,EAAMuB,MAC3CvB,EAAM2B,cAAcD,EAAM1B,EAAMuB,OAGlCyJ,EAAU,KACZV,GAAW,GACXtK,EAAMiH,MAAM6E,MAAMpK,IAED,OAATA,IAAeA,EAAO,SACK0B,IAA3BpD,EAAMmJ,iBACN4B,EAAa/K,EAAMmJ,iBAAiBzH,IACjCqJ,EAAarJ,GACpB4I,GAAW,OAInB4B,qBAAU,KACNlB,MACD,CAAChL,EAAMuB,OAEV2K,qBAAU,KAAO,IAAD,EAEZ,MAAMS,EAAiB,UAAG3M,EAAMiB,UAAUjB,EAAMuB,aAAzB,aAAG,EAA6BsJ,aAGvB,IAAD,OAFLzH,IAAtBuJ,GAAmC9B,IAAiB8B,IAEhDA,EAAoB,GACpB7B,GAAiB6B,GACjBvC,EAAa,UAACpK,EAAMiB,UAAUjB,EAAMuB,aAAvB,aAAC,EAA6BkB,cAG3CqI,EAAgB6B,GAChB3B,QAGT,CAAChL,EAAMiB,UAAW4J,IAIrB,MAAMqD,EAAaC,aAAe,IAAM,cAAC,IAAD,CAAcrK,MAAO,CAACC,OAAQ,OAAQqK,MAAO,YAC/EC,EAAeC,aAAiBtO,GAAe,uBAAQA,MACvDuO,EAAqBC,aAAmBxO,GAAe,0BAAWA,MAElEyO,EAAY,IAAgC,IAA/B,SAACC,EAAD,SAAWC,GAAmB,EAEzCD,IAAaC,IAEb5D,EAAa6D,YAAmB3N,EAAWyN,EAAUC,IACrD3O,EAAM6O,WAAa7O,EAAM6O,UAAU5N,EAAWyN,EAAUC,KAmB1DG,EAAqB,CACvB,CACIjM,MAAO,GACPa,UAAW,OACXnD,MAAO,GACPsG,UAAW,eACXjD,OAAQ,IAAM,cAACsK,EAAD,MAItB,IAAI1K,EAAUxD,EAAMwD,QAGpB,OAFIxD,EAAM+O,UAASvL,EAAUsL,EAAYE,OAAOxL,IAG5C,cAAC,IAAD,IACQxD,EACJ+N,aAAc/N,EAAM+N,aACpBjF,OAAQ9I,EAAM8I,OACduB,QAASA,EACTtF,KAAM/E,EAAM+E,KACZvB,QAASA,EACTf,WAAYxB,EACZgH,YAAY,EACZgH,WAAY,CACRC,KAAM,CACFC,QAzCYnP,GAEpB,cAACuO,EAAD,CACIa,eAAa,EACbC,mBAAiB,EACjBC,YAAY,eACZb,UAAWA,KACPzO,IAmCAuP,IA/BS,IAA4C,IAA3C,UAAC1I,EAAD,MAAY/C,KAAU0L,GAAoB,EAEhE,MAAMC,EAAQxO,EAAU4E,WAAWW,GAAWA,EAAExG,EAAM8I,UAAY0G,EAAU,kBAC5E,OAAO,cAACnB,EAAD,CAAcoB,MAAOA,KAAWD,eAyDP,CAACxP,EAAY0P,KAAoB,IAAD,IAChE,OAAO1P,EAAMwD,UAAYkM,EAAUlM,UAC9B,UAAAxD,EAAM+N,oBAAN,eAAoBxL,gBAAgByG,WAApC,UAA+C0G,EAAU3B,oBAAzD,aAA+C,EAAwBxL,gBAAgByG,SACxFhJ,EAAMiB,YAAcyO,EAAUzO,WAC9BjB,EAAM2P,cAAiBD,EAAUC,gB,iCC/J7C,qEAUA,MAAM9H,UAA2B+H,YAAqB,cAAD,yBAMjDnO,mBAAsBC,IAClBmO,KAAK7P,MAAMyB,mBAAmBC,EAAMmO,KAAK7P,MAAMuB,OALnDuO,qBAQAlM,SAAU,IAAD,EACL,MAAMrB,EAAkBC,YAAE,UAACqN,KAAK7P,MAAMiB,UAAU4O,KAAK7P,MAAMuB,aAAjC,aAAC,EAAuCgB,gBAAiB,IACnF,IAAIwL,EAAoB,CACpBxL,kBACAmG,SAAWnG,IACPsN,KAAKpO,mBAAmBc,IAG5BwN,WAAY,CACR,CACIpM,IAAK,MACLE,KAAMgM,KAAK7P,MAAMyD,EAAE,eACnBuM,SAAWC,IACP,IAAIC,EAAqBD,EACzBC,EAAqBA,EAAmBlB,OAAOzM,EAAgB4N,QAAQxM,IAC3DsM,EAAkBG,SAASzM,MAEvCkM,KAAKpO,mBAAmByO,KAGhC,CACIvM,IAAK,QACLE,KAAMgM,KAAK7P,MAAMyD,EAAE,SACnBuM,SAAWC,IACP,IAAIC,EAAqB3N,EAAgB4N,QAAQxM,IACrCsM,EAAkBG,SAASzM,KAEvCkM,KAAKpO,mBAAmByO,KAGhC,CACIvM,IAAK,SACLE,KAAMgM,KAAK7P,MAAMyD,EAAE,UACnBuM,SAAWC,IACP,IAAIC,EAAqBD,EAAkBE,QAAQxM,IACvCpB,EAAgB6N,SAASzM,KAErCuM,EAAqBA,EAAmBlB,OAAOzM,EAAgB4N,QAAQxM,IAC3DsM,EAAkBG,SAASzM,MAEvCkM,KAAKpO,mBAAmByO,OAMxC,OACI,qCACKL,KAAK7P,MAAMqQ,YACR,cAAC,IAAD,IACSR,KAAK7P,MACV+N,aAAc8B,KAAK7P,MAAM8H,sBAAmB1E,EAAY2K,KAGrC,IAA1B8B,KAAK7P,MAAMqQ,YACR,cAAC,IAAD,IACSR,KAAK7P,MACV+N,aAAc8B,KAAK7P,MAAM8H,sBAAmB1E,EAAY2K,QAqBjEpN,iBAbUC,IAEd,CACHK,UAFuBL,EAAME,YAEXG,cAKEI,IAAD,CACvBI,mBAAoB,CAACC,EAAmBH,IACpCF,EAAS,CAACG,KAAM,qBAAsBE,KAAMA,EAAMH,KAAMA,OAGjDZ,CAGbb,cACEC,YAAW8H","file":"static/js/28.854f48c1.chunk.js","sourcesContent":["import {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport React, {useState} from \"react\";\nimport {Button, Modal} from \"antd\";\nimport SubmissionList from \"./SubmissionList\";\n\nconst ModalSubmissionList = (props: any) => {\n    const [ModalVis, setModalVis] = useState<boolean>(false);\n\n    return (\n        <>\n            <Button\n                {...props.btnProps}\n                onClick={() => {\n                    setModalVis(true)\n                }}\n            >\n                {props.btnText}\n            </Button>\n            <Modal\n                width={1250}\n                visible={ModalVis}\n                footer={false}\n                onCancel={() => {\n                    setModalVis(false)\n                }}\n            >\n                <SubmissionList\n                    {...props}\n                />\n            </Modal>\n        </>\n\n    )\n}\n\nexport default withTranslation()(withRouter(ModalSubmissionList))","import {withTranslation} from \"react-i18next\";\nimport {Button, Card, Form, Input, message, Select, Space, Tooltip} from \"antd\";\nimport {SyncJudging} from \"../SyncJudging\";\nimport cApi from \"../../../Utils/API/c-api\";\nimport {ReloadOutlined} from \"@ant-design/icons\";\nimport {RunningResultList, StateList, SubmissionMap, TopSubmissionInfoType} from \"../../../Type/ISubmission\";\nimport TestCase from \"../TestCase\";\nimport React, {Dispatch, useState} from \"react\";\nimport moment from \"moment\";\nimport TableWithSelection from \"../../common/Table/TableWithSelection\";\nimport ReJudge from \"../Func/ReJudge\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck, isValueEmpty} from \"../../../Utils/empty\";\nimport {UserState} from \"../../../Type/Iuser\";\nimport judgeAuth from \"../../../Utils/judgeAhtu\";\nimport ModalSubmissionList from \"./ModalSubmissionList\";\n\nconst SubmissionList = (props: any) => {\n\n    // 为了动态显示评测点信息，使用 ws 与后端进行链接\n    // ws 是否打开\n    const [webSocketOpen, setWebSocketOpen] = useState<boolean>(false)\n    // ws 发送的信息（在打开时，当前数据的变更将同步发送至 ws）\n    const [webSocketQueryList, setWebSocketQueryList] = useState<string[]>([])\n    const [refreshDisable, setRefreshDisable] = useState<boolean>(false)\n\n    const selectedRowKeys = ck(props.tableData[props.name]?.selectedRowKeys, [])\n    const dataSource = ck(props.tableData[props.name]?.dataSource, [])\n\n    const addCaseInfo = (data: any[]) => {\n\n        const submissionIdHex = data[0]\n        const submissionVersion = data[1]\n        // const checkpointType = data[2]\n        const checkpointIndex = data[3]\n        // const checkpointId = data[4]\n        const judgeResult = data[5]\n        const judgeScore = data[6]\n        const usedTime = data[7]\n        const usedMemory = data[8]\n\n        let dt = dataSource\n        const Index = dt.findIndex((value: any) => value.submissionId === submissionIdHex)\n        if (Index === -1) return\n\n        // 信息如果不存在，初始化信息\n        if (isValueEmpty(dt[Index].cur_cpt)) {\n            dt[Index].cur_cpt = new Set();\n        }\n\n        // 当 checkpointIndex < 0 时，表示同步运行状态\n        // -4: Queueing, -3: Compiling, -2: Judging, -1: End\n        if (checkpointIndex < 0) {\n            dt[Index].result = checkpointIndex.toString()\n            // 结束时，填写评测信息\n            if (checkpointIndex === -1) {\n                localStorage.setItem(`submissionVersion:${submissionIdHex}`, `${submissionVersion}`)\n                dt[Index].result = judgeResult\n                dt[Index].score = judgeScore\n                dt[Index].usedTime = usedTime\n                dt[Index].usedMemory = usedMemory\n            }\n            // 扫描全部评测，检查还有没有未更新完的\n            let runningNumber = 0\n            for (const x of dt) if (parseInt(x.result) <= 0) runningNumber += 1\n            if (runningNumber === 0) setWebSocketOpen(false)\n        } else { // 否则表示同步评测点信息\n            dt[Index].cur_cpt.add(checkpointIndex)\n            dt[Index].RunningStep = dt[Index].cur_cpt.size\n            dt[Index].score += judgeScore\n\n            // 老版本的评测点信息同步\n            // let nowID = 0\n            // if (checkpointType === 0) {\n            //     nowID = checkpointIndex + 1\n            // } else if (checkpointType === 1) {\n            //     nowID = dt[Index].checkpointNum + checkpointIndex + 1\n            // }\n            // if (dt[Index].RunningStep < nowID) {\n            //     dt[Index].RunningStep = nowID\n            //     dt[Index].score += judgeScore\n            // }\n        }\n        props.setDataSource(dt, props.name)\n    }\n\n    const showSubmission = (record: any) => {\n        props.setTopSubmission(record.submissionId, {\n            title: record.problemTitle,\n            TimeLimit: record.timeLimit,\n            MemoryLimit: record.memoryLimit,\n            scoreMod: record.sumScore === undefined ? \"disable\" : \"show\",\n            sumScore: record.sumScore,\n            testcaseMod: \"show\",\n            QuerySubmissionAPI: props.QuerySubmissionAPI\n        })\n        props.setSubmissionModalVis(true)\n    }\n\n    const columns = [\n        {\n            title: props.t(\"results\"),\n            dataIndex: \"result\",\n            key: \"result\",\n            render: (text: any, record: any) => {\n                return (\n                    <div style={{cursor: 'pointer'}} onClick={() => {\n                        showSubmission(record)\n                    }}>\n                        <TestCase\n                            type={\"text\"}\n                            caseType={StateList.indexOf(SubmissionMap[text])}\n                            append={\n                                text === \"-2\" ?\n                                    \"(\" + record.RunningStep + \"/\" + (record.checkpointNum + record.publicCheckpointNum) + \")\"\n                                    : \"\"\n                            }\n                        />\n                    </div>\n\n                )\n            }\n        },\n        {\n            title: props.t(\"score\"),\n            dataIndex: \"score\",\n            key: \"score\",\n            render: (text: number, record: any) => {\n                if (record.sumScore === undefined)\n                    return text\n                return Math.floor(text / record.sumScore * 100) + \"%\"\n            }\n        },\n        {\n            title: props.t(\"submissionTime\"),\n            dataIndex: \"submitTime\",\n            key: \"submitTime\",\n            render: (text: any) => {\n                return (\n                    <Tooltip title={moment(text).format('YYYY-MM-DD HH:mm:ss')}>\n                        <span>{moment(text).fromNow()}</span>\n                    </Tooltip>\n                )\n            }\n        }\n    ]\n\n    const columnsAll = [\n        {\n            title: \"ID\",\n            dataIndex: \"submissionId\",\n            key: \"submissionId\",\n            render: (text: any, record: any) => {\n                return <Button type={\"link\"} size={\"small\"} onClick={() => {\n                    showSubmission(record)\n                }}>\n                    {text}\n                </Button>\n            }\n        },\n        {\n            title: props.t(\"username\"),\n            dataIndex: \"username\",\n            key: \"username\"\n        },\n        {\n            title: props.t(\"problemNo.\"),\n            dataIndex: \"problemCode\",\n            key: \"problemCode\",\n            render: props.problemCodeRender\n        },\n        {\n            title: props.t(\"problemName\"),\n            dataIndex: \"problemTitle\",\n            key: \"problemTitle\"\n        },\n        {\n            title: props.t(\"results\"),\n            dataIndex: \"result\",\n            key: \"result\",\n            width: 170,\n            render: (text: any, record: any) => {\n                return (\n                    <div style={{cursor: 'pointer'}} onClick={() => {\n                        showSubmission(record)\n                    }}>\n                        <TestCase\n                            type={\"text\"}\n                            caseType={StateList.indexOf(SubmissionMap[text])}\n                            append={\n                                text === \"-2\" ?\n                                    \"(\" + record.RunningStep + \"/\" + (record.checkpointNum + record.publicCheckpointNum) + \")\" :\n                                    \"\"\n                            }\n                        />\n                    </div>\n                )\n            }\n        },\n        {\n            title: props.t(\"score\"),\n            dataIndex: \"score\",\n            key: \"score\",\n            render: (text: number, record: any) => {\n                if (record.sumScore === undefined)\n                    return text\n                return Math.floor(text / record.sumScore * 100) + \"%\"\n            }\n        },\n        {\n            title: props.t(\"template\"),\n            dataIndex: \"judgeTemplateTitle\",\n            key: \"judgeTemplateTitle\"\n        },\n        {\n            title: props.t(\"memoryUsage\"),\n            dataIndex: \"usedMemory\",\n            key: \"usedMemory\",\n            render: (text: any) => {\n                return text + \" KB\"\n            }\n        },\n        {\n            title: props.t(\"timeUsage\"),\n            dataIndex: \"usedTime\",\n            key: \"usedTime\",\n            render: (text: any) => {\n                return text + \" ms\"\n            }\n        },\n        {\n            title: props.t(\"submissionTime\"),\n            dataIndex: \"submitTime\",\n            key: \"submitTime\",\n            render: (text: any) => {\n                return (\n                    <Tooltip title={moment(text).format('YYYY-MM-DD HH:mm:ss')}>\n                        <span>{moment(text).fromNow()}</span>\n                    </Tooltip>\n                )\n            }\n        }\n    ]\n\n    const getForm = (onFinish: any) => {\n        return (\n            <Space size={30}>\n                <Form.Item label={props.t(\"username\")} name={\"username\"}>\n                    <Input\n                        onPressEnter={(e: any) => {\n                            onFinish()\n                        }}\n                        allowClear\n                    />\n                </Form.Item>\n                <Form.Item label={props.t(\"problemNo.\")} name={\"problemCode\"}>\n                    <Input\n                        onPressEnter={(e: any) => {\n                            onFinish()\n                        }}\n                        allowClear\n                    />\n                </Form.Item>\n                <Form.Item label={props.t(\"JudgeResult\")} name={\"judgeResult\"}>\n                    <Select onChange={onFinish} allowClear style={{width: 200}}>\n                        {\n                            RunningResultList.map((value) => {\n                                return <Select.Option value={parseInt(value)}>\n                                    <TestCase type={\"text\"}\n                                              caseType={StateList.indexOf(SubmissionMap[value])}/>\n                                </Select.Option>\n                            })\n                        }\n                    </Select>\n                </Form.Item>\n            </Space>\n        )\n    }\n\n    const API = (data: any) => {\n        if (\"problemCode\" in data && !isValueEmpty(data[\"problemCode\"])) {\n            let v: string = data[\"problemCode\"]\n            if (v.length === 1) {\n                if (v.match(/^[a-z]$/) !== null) v = (v.charCodeAt(0) - 'a'.charCodeAt(0) + 1).toString()\n                if (v.match(/^[A-Z]$/) !== null) v = (v.charCodeAt(0) - 'A'.charCodeAt(0) + 1).toString()\n            } else if (v.match(/^[0-9]{4}$/) !== null) {\n                v = \"SDUOJ-\" + v\n            }\n            data[\"problemCode\"] = v\n        }\n        return props.API(data)\n    }\n\n    return (\n        <>\n            <Card\n                title={\n                    <Space>\n                        {props.title !== undefined ? props.title : props.t(\"submissionRecord\")}\n                        <SyncJudging\n                            open={webSocketOpen}\n                            dataHandle={addCaseInfo}\n                            queryList={webSocketQueryList}/>\n                    </Space>\n                }\n                style={props.lessInfo ? {} : {minWidth: 1200}}\n                className={props.lessInfo ? \"smallBodyPadding\" : \"\"}\n                extra={\n                    <Space>\n                        {props.lessInfo !== true && judgeAuth(props.roles, [\"admin\", \"superadmin\"]) && (\n                            <ReJudge\n                                API={cApi.rejudge}\n                                data={selectedRowKeys}\n                                afterSuccess={() => {\n                                    props.addTableVersion(props.name)\n                                    props.setSelectedRowKeys([], props.name)\n                                }}\n                            />\n                        )}\n                        <Button\n                            icon={<ReloadOutlined/>}\n                            onClick={() => {\n                                setRefreshDisable(true)\n                                props.addTableVersion(props.name)\n                                message.success(props.t(\"refreshSuccessfully\"))\n                                setTimeout(() => {\n                                    setRefreshDisable(false)\n                                }, 3000)\n                            }}\n                            disabled={refreshDisable}\n                        >\n                            {props.t(\"refresh\")}\n                        </Button>\n                    </Space>\n                }\n                actions={(props.lessInfo && props.isLogin) ? [\n                    <div>\n                        {props.lessInfo && props.isLogin && (\n                            <ModalSubmissionList\n                                btnProps={{type: \"text\", block: true}}\n                                btnText={props.t(\"ShowAllInformation\")}\n                                name={\"Pro-SubmissionList-\" + props.name}\n                                API={props.API}\n                                QuerySubmissionAPI={props.QuerySubmissionAPI}\n                            />\n                        )}\n                    </div>\n                ] : undefined}\n            >\n                <TableWithSelection\n                    disableSelection={props.lessInfo || !judgeAuth(props.roles, [\"admin\", \"superadmin\"])}\n                    defaultPageSize={props.lessInfo ? 5 : undefined}\n                    showSizeChanger={props.lessInfo ? false : undefined}\n                    pagination={props.lessInfo ? false : undefined}\n                    columns={props.lessInfo ? columns : columnsAll}\n                    getForm={props.useForm === true ? getForm : undefined}\n                    name={props.name}\n                    size={\"small\"}\n                    rowKey={\"submissionId\"}\n                    API={API}\n                    APIRowsTransForm={(value: any) => {\n                        if (isValueEmpty(value)) value = []\n                        let webSocketQueryList = []\n                        let data: any = []\n                        for (const x of value) {\n                            if (x.judgeResult <= 0) webSocketQueryList.push(x.submissionId)\n                            data.push({\n                                ...x,\n                                score: x.judgeScore,\n                                RunningStep: 0,\n                                result: x.judgeResult.toString(),\n                                // sumScore: ck(x.sumScore, 100),\n                                sumScore: x.sumScore,\n                                submitTime: parseInt(x.gmtCreate),\n                            })\n                        }\n                        if (webSocketQueryList.length !== 0) {\n                            setWebSocketOpen(true)\n                            setWebSocketQueryList(webSocketQueryList)\n                        }\n                        return data\n                    }}\n                />\n            </Card>\n        </>\n    )\n}\n\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    const UState: UserState = state.UserReducer\n    return {\n        tableData: TState.tableData,\n        roles: UState.userInfo?.roles,\n        isLogin: UState.isLogin,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    addTableVersion: (name: string) => dispatch({\n        type: \"addTableVersion\",\n        name: name,\n    }),\n    setSelectedRowKeys: (data: React.Key[], name: string) =>\n        dispatch({type: \"setSelectedRowKeys\", data: data, name: name}),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: true}),\n    setTopSubmission: (submissionID: string, submissionInfo: TopSubmissionInfoType) => dispatch({\n        type: \"setTopSubmission\",\n        submissionID: submissionID,\n        submissionInfo: submissionInfo\n    }),\n    setSubmissionModalVis: (data: boolean) => dispatch({type: \"setSubmissionModalVis\", data: data})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(SubmissionList)\n))\n","import {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport SubmissionList from \"../submission/SubmissionList/SubmissionList\";\nimport cApi from \"../../Utils/API/c-api\";\nimport {Button} from \"antd\";\nimport React from \"react\";\nimport {UrlPrefix} from \"../../Config/constValue\";\n\nconst Status = (props: any) =>{\n\n    const contestId = props.match.params.contestId\n\n    const SubmissionListAPI = (data: any) => {\n        return cApi.getContestSubmissionList({\n            ...data,\n            // username: props.username,\n            contestId: contestId\n        })\n    }\n    const QuerySubmissionAPI = (submissionId: string) => {\n        return cApi.getContestSubmissionInfo({contestId: contestId, submissionId: submissionId})\n    }\n\n    return (\n        <>\n            <SubmissionList\n                name={\"ContestSubmission-\" + contestId}\n                useForm={true}\n                API={SubmissionListAPI}\n                QuerySubmissionAPI={QuerySubmissionAPI}\n                // RejudgeAPI={(data: any)=>{\n                //     return cApi.rejudgeInContest({contestId: contestId, submissionIds: data})\n                // }}\n                InvalidateAPI={(data: any)=>{\n                    return cApi.invalidateContestSubmission({submissionId: data['submissionId'], contestId: contestId})\n                }}\n                problemCodeRender={(text: any) => {\n                    return (\n                        <Button type={\"text\"} size={\"small\"} onClick={() => {\n                           props.history.push(UrlPrefix + \"/contest/\" +contestId + \"/problem/\" + text)\n                        }}>\n                            {String.fromCharCode('A'.charCodeAt(0) + parseInt(text) - 1)}\n                        </Button>\n                    )\n                }}\n            />\n        </>\n    )\n}\n\nexport default withTranslation()(withRouter(Status))","import {Button, Card, Form, List, Space, Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {defaultPageSize} from \"../../../Config/constValue\";\nimport {UserState} from \"../../../Type/Iuser\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport Search from \"antd/es/input/Search\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck} from \"../../../Utils/empty\";\nimport {SizeType} from \"antd/lib/config-provider/SizeContext\";\nimport {ColumnsType} from \"antd/lib/table/interface\";\nimport {useForm} from \"antd/es/form/Form\";\n\nexport interface TableWithPaginationProps {\n    API: any                  // 表格查询数据的接口\n    size: SizeType            // 表格的大小\n    columns: ColumnsType<any> // 表格的列\n    name: string              // 表格名称\n    APIRowsTransForm?: any    // 针对API传输的数据进行转化的函数\n    search?: boolean          // 是否开启搜索功能\n    defaultPageSize?: number  // 表格默认的页大小\n\n    // 面向 可选择的行 开放的接口\n    // setDataSource?: any       // 输出当前表格的数据\n    rowKey?: any              // 作为 key 记录的值\n    rowSelection?: any        // 可选列的相关配置\n\n}\n\nconst TableWithPagination = (props: any) => {\n    const [total, setTotal] = useState<number>(0)                   // 项的总数\n    const [tableData, setTableDataX] = useState()                            // 表格核心数据\n    const [loading, setLoading] = useState(true)                    // 表格的加载状态\n    const [PageNow, setPageNow] = useState<number>(1)               // 当前的页码数\n    const [PageSize, setPageSize] = useState<number>(ck(props.defaultPageSize, defaultPageSize))         // 当前的页大小\n    const [searchText, setSearchText] = useState<string | undefined>()        // 搜索的文本\n    const [tableVersion, setTableVersion] = useState<number>(0)     // 表格版本（控制表格刷新）\n\n    const setTableData = (data: any) => {\n        setTableDataX(data)\n        // 若有 选中行 的相关配置，传递数据进行更新\n        if (props.setDataSource !== undefined && props.name !== undefined)\n            props.setDataSource(data, props.name)\n    }\n    // 这里的所有的参数都只能增量的修改，不能删除，删除需要手动更新 redux\n    const getInfo = (pageNow?: number, pageSize?: number, searchKey?: string, moreProps?: any) => {\n        const propsTableInfo = props.tableData[props.name]?.tableInfo\n        if (propsTableInfo !== undefined) {\n            if (moreProps === undefined && propsTableInfo.moreProps !== undefined){\n                form.setFieldsValue(propsTableInfo.moreProps)\n            }\n            pageNow = pageNow ?? propsTableInfo.pageNow\n            pageSize = pageSize ?? propsTableInfo.pageSize\n            searchKey = searchKey ?? propsTableInfo.searchKey\n            moreProps = moreProps ?? propsTableInfo.moreProps\n        }\n        let pn = pageNow ?? PageNow\n        let ps = pageSize ?? PageSize\n        let sk = searchKey ?? searchText\n        let fmp = moreProps ?? form.getFieldsValue()\n        setPageNow(pn)\n        setPageSize(ps)\n        setSearchText(sk)\n        setLoading(true)\n        props.API({\n            pageNow: pn,\n            pageSize: ps,\n            searchKey: sk,\n            ...fmp\n        }).then((data: any) => {\n            // console.log(\"data\", data)\n            if (data.rows === null) data.rows = []\n            if (props.APIRowsTransForm !== undefined) {\n                setTableData(props.APIRowsTransForm(data.rows))\n            } else setTableData(data.rows)\n            if (data.totalNum !== undefined && data.totalNum !== \"0\") {\n                setTotal(data.totalNum)\n                props.name && props.setTableInfo(props.name, {\n                    total: data.totalNum,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            } else {\n                setTotal(ps * data.totalPage);\n                props.name && props.setTableInfo(props.name, {\n                    total: ps * data.totalPage,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            }\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        form.setFieldsValue(props.initRequestProps)\n        getInfo()\n    }, [props.name])\n\n    // 带有表单的筛选\n    const [form] = useForm()\n    const onFinish = () => {\n        const values = form.getFieldsValue()\n        if (JSON.stringify(values) !== \"{}\")\n            getInfo(1, PageSize, undefined, values)\n    };\n    const onReset = () => {\n        const values = form.getFieldsValue()\n        form.resetFields();\n        const tf = props.tableData[props.name]?.tableInfo\n        props.name && props.setTableInfo(props.name, {\n            total: tf.total,\n            pageNow: tf.pageNow,\n            pageSize: tf.pageSize,\n            searchKey: tf.searchKey,\n            moreProps: undefined\n        })\n        const valuesAfter = form.getFieldsValue()\n        // 重置前后若发生改变，则重新加载表格\n        if (JSON.stringify(values) !== JSON.stringify(valuesAfter))\n            getInfo(1, PageSize, undefined, undefined)\n\n    };\n\n\n    useEffect(() => {\n        // 监听表格的版本变化，当版本变更时更新表格\n        const propsTableVersion = props.tableData[props.name]?.tableVersion\n        if (propsTableVersion !== undefined && tableVersion !== propsTableVersion) {\n            // 如果数据被外部应用更新，则用 redux 中的数据更新当前行\n            if (propsTableVersion < 0) {\n                setTableVersion(-propsTableVersion)\n                setTableDataX(props.tableData[props.name]?.dataSource)\n            } else {\n                // 否则，重新进行请求\n                setTableVersion(propsTableVersion)\n                const values = form.getFieldsValue()\n                getInfo(PageNow, PageSize, searchText, values)\n            }\n        }\n    }, [props.tableData, tableVersion])\n\n    return (\n        <>\n            {props.useList && (\n                <Card\n                    title={props.title}\n                    bordered={true}\n                    size={\"default\"}\n                    className={props.cardProps ?? \"zeroBodyPaddingLeft\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={props.t(\"searchUser\")}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            const values = form.getFieldsValue()\n                                            getInfo(1, PageSize, text, values)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        {props.useFormBtn && (\n                                            <Space style={{marginLeft: \"30px\"}} size={20}>\n                                                <Button type=\"primary\" onClick={onFinish}>\n                                                    筛选\n                                                </Button>\n                                                <Button htmlType=\"button\" onClick={onReset}>\n                                                    重置\n                                                </Button>\n                                            </Space>\n                                        )}\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <List\n                        grid={props.grid}\n                        itemLayout={\"vertical\"}\n                        loading={loading}\n                        size={props.size}\n                        dataSource={tableData}\n                        renderItem={props.renderItem}\n                        pagination={{\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            size: \"small\",\n                            hideOnSinglePage: true,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n            {!props.useList && (\n                <Card\n                    bordered={false}\n                    size={\"small\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={\"搜索\"}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            getInfo(1, PageSize, text)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        <Space style={{marginLeft: \"30px\"}} size={20}>\n                                            <Button type=\"primary\" onClick={onFinish}>\n                                                {props.t(\"filtering\")}\n                                            </Button>\n                                            <Button htmlType=\"button\" onClick={onReset}>\n                                                {props.t(\"Reset\")}\n                                            </Button>\n                                        </Space>\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <Table\n                        rowKey={props.rowKey}\n                        loading={loading}\n                        size={props.size}\n                        columns={props.columns}\n                        rowSelection={props.rowSelection}\n                        dataSource={tableData}\n                        pagination={props.pagination ?? {\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            hideOnSinglePage: false,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n        </>\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    const UState: UserState = state.UserReducer\n    const TState: TableState = state.TableReduce\n    return {\n        roles: UState.userInfo?.roles,\n        tableData: {...TState.tableData}\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setTableInfo: (name: string, data: any) => dispatch({\n        type: \"setTableInfo\",\n        name: name,\n        data: data\n    }),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: false})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(TableWithPagination)\n))\n\n","import {Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {SizeType} from \"antd/lib/config-provider/SizeContext\";\nimport {ColumnsType} from \"antd/lib/table/interface\";\nimport {SortableContainer, SortableElement, SortableHandle} from \"react-sortable-hoc\";\nimport {MenuOutlined} from \"@ant-design/icons\";\nimport {arrayMoveImmutable} from \"array-move\";\n\nexport interface TableWithPaginationProps {\n    API: any                  // 表格查询数据的接口\n    size: SizeType            // 表格的大小\n    columns: ColumnsType<any> // 表格的列\n    name: string              // 表格名称\n    APIRowsTransForm?: any    // 针对API传输的数据进行转化的函数\n\n    // 面向 可选择的行 开放的接口\n    rowKey?: any              // 作为 key 记录的值\n\n}\n\nconst TableWithAllData = (props: any) => {\n    const [tableData, setTableDataX] = useState([])                            // 表格核心数据\n    const [loading, setLoading] = useState(true)                    // 表格的加载状态\n    const [tableVersion, setTableVersion] = useState<number>(0)     // 表格版本（控制表格刷新）\n    // const [sortSwitch, setSortSwitch] = useState<boolean>(false);           // 操作是否开启排序模式\n\n\n    const setTableData = (data: any) => {\n        setTableDataX(data)\n        // 若有 选中行 的相关配置，传递数据进行更新\n        if (props.setDataSource !== undefined && props.name !== undefined)\n            props.setDataSource(data, props.name)\n    }\n\n    const getInfo = () => {\n        setLoading(true)\n        props.API().then((data: any) => {\n            // console.log(\"data\", data)\n            if (data === null) data = []\n            if (props.APIRowsTransForm !== undefined) {\n                setTableData(props.APIRowsTransForm(data))\n            } else setTableData(data)\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        getInfo()\n    }, [props.name])\n\n    useEffect(() => {\n        // 监听表格的版本变化，当版本变更时更新表格\n        const propsTableVersion = props.tableData[props.name]?.tableVersion\n        if (propsTableVersion !== undefined && tableVersion !== propsTableVersion) {\n            // 如果数据被外部应用更新，则用 redux 中的数据更新当前行\n            if (propsTableVersion < 0) {\n                setTableVersion(-propsTableVersion)\n                setTableDataX(props.tableData[props.name]?.dataSource)\n            } else {\n                // 否则，重新进行请求\n                setTableVersion(propsTableVersion)\n                getInfo()\n            }\n        }\n    }, [props.tableData, tableVersion])\n\n    // === 拖拽排序 ===\n    // 可拖拽的排序手柄\n    const DragHandle = SortableHandle(() => <MenuOutlined style={{cursor: 'grab', color: '#999'}}/>);\n    const SortableItem = SortableElement((props: any) => <tr {...props} />);\n    const XSortableContainer = SortableContainer((props: any) => <tbody {...props} />);\n    // 排序结束后\n    const onSortEnd = ({oldIndex, newIndex}: any) => {\n        // 当前排序是有效的\n        if (oldIndex !== newIndex) {\n            // 移动数组中的元素，并设置到当前的状态\n            setTableData(arrayMoveImmutable(tableData, oldIndex, newIndex))\n            props.afterDrag && props.afterDrag(tableData, oldIndex, newIndex)\n        }\n    };\n    const DraggableContainer = (props: any) => {\n        return (\n            <XSortableContainer\n                useDragHandle\n                disableAutoscroll\n                helperClass=\"row-dragging\"\n                onSortEnd={onSortEnd}\n                {...props}\n            />\n        )\n    }\n    const DraggableBodyRow = ({className, style, ...restProps}: any) => {\n        // function findIndex base on Table rowKey props and should always be a right array index\n        const index = tableData.findIndex((x: any) => x[props.rowKey] === restProps['data-row-key']);\n        return <SortableItem index={index} {...restProps} />\n    };\n    const sortColumns: any[] = [\n        {\n            title: \"\",\n            dataIndex: 'sort',\n            width: 50,\n            className: \"drag-visable\",\n            render: () => <DragHandle/>,\n        }\n    ]\n\n    let columns = props.columns;\n    if (props.useDrag) columns = sortColumns.concat(columns)\n\n    return (\n        <Table\n            {...props}\n            rowSelection={props.rowSelection}\n            rowKey={props.rowKey}\n            loading={loading}\n            size={props.size}\n            columns={columns}\n            dataSource={tableData}\n            pagination={false}\n            components={{\n                body: {\n                    wrapper: DraggableContainer,\n                    row: DraggableBodyRow,\n                },\n            }}\n        />\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    return {\n        tableData: {...TState.tableData}\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setTableInfo: (name: string, data: any) => dispatch({\n        type: \"setTableInfo\",\n        name: name,\n        data: data\n    }),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: false})\n})\n\nexport default React.memo(connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(withTranslation()(\n        withRouter(TableWithAllData))), (props: any, nextProps: any) => {\n        return props.columns === nextProps.columns &&\n            (props.rowSelection?.selectedRowKeys.length === nextProps.rowSelection?.selectedRowKeys.length) &&\n            props.tableData === nextProps.tableData &&\n            props.updateTrick ===  nextProps.updateTrick\n    }\n)\n\n","import React, {Component, Dispatch} from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport TableWithPagination from \"./TableWithPagination\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck} from \"../../../Utils/empty\";\nimport TableWithAllData from \"./TableWithAllData\";\n\n\nclass TableWithSelection extends Component<any, any> {\n\n    componentDidMount() {\n\n    }\n\n    setSelectedRowKeys = (data: any) =>{\n        this.props.setSelectedRowKeys(data, this.props.name)\n    }\n\n    render() {\n        const selectedRowKeys = ck(this.props.tableData[this.props.name]?.selectedRowKeys, [])\n        let rowSelection: any = {\n            selectedRowKeys,\n            onChange: (selectedRowKeys: React.Key[]) => {\n                this.setSelectedRowKeys(selectedRowKeys)\n            },\n            // 多选时的下拉选项\n            selections: [\n                {\n                    key: 'all',\n                    text: this.props.t(\"selectedAll\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = changeableRowKeys\n                        newSelectedRowKeys = newSelectedRowKeys.concat(selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        }))\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n                {\n                    key: 'clear',\n                    text: this.props.t(\"clear\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        })\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n                {\n                    key: 'invert',\n                    text: this.props.t(\"invert\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = changeableRowKeys.filter((key:React.Key) => {\n                            return !selectedRowKeys.includes(key);\n                        });\n                        newSelectedRowKeys = newSelectedRowKeys.concat(selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        }))\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n            ]\n        };\n\n        return (\n            <>\n                {this.props.uesAlldata && (\n                    <TableWithAllData\n                        {... this.props}\n                        rowSelection={this.props.disableSelection ? undefined : rowSelection}\n                    />\n                )}\n                {this.props.uesAlldata !== true && (\n                    <TableWithPagination\n                        {... this.props}\n                        rowSelection={this.props.disableSelection ? undefined : rowSelection}\n                    />\n                )}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    return {\n        tableData: TState.tableData\n    }\n\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setSelectedRowKeys: (data: React.Key[], name: string) =>\n        dispatch({type: \"setSelectedRowKeys\", data: data, name: name}),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(TableWithSelection)\n))\n\n"],"sourceRoot":""}