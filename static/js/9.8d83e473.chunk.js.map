{"version":3,"sources":["Component/common/Table/TableWithAllData.tsx","Component/common/Table/TableWithSelection.tsx","Pages/Client/CSubmissions.tsx","Component/submission/SubmissionList/ModalSubmissionList.tsx","Component/submission/SubmissionList/SubmissionList.tsx","Component/common/Table/TableWithPagination.tsx"],"names":["React","memo","connect","state","tableData","TableReduce","dispatch","setTableInfo","name","data","type","setDataSource","add","withTranslation","withRouter","props","setTableDataX","useState","loading","setLoading","tableVersion","setTableVersion","setTableData","undefined","getInfo","API","then","APIRowsTransForm","useEffect","propsTableVersion","dataSource","DragHandle","SortableHandle","style","cursor","color","SortableItem","SortableElement","XSortableContainer","SortableContainer","onSortEnd","oldIndex","newIndex","arrayMoveImmutable","afterDrag","sortColumns","title","dataIndex","width","className","render","columns","useDrag","concat","rowSelection","rowKey","size","pagination","components","body","wrapper","useDragHandle","disableAutoscroll","helperClass","row","restProps","index","findIndex","x","nextProps","selectedRowKeys","length","updateTrick","TableWithSelection","Component","setSelectedRowKeys","this","componentDidMount","ck","onChange","selections","key","text","t","onSelect","changeableRowKeys","newSelectedRowKeys","filter","includes","uesAlldata","disableSelection","CSubmissions","textAlign","margin","maxWidth","useForm","cApi","getSubmissionList","QuerySubmissionAPI","submissionId","getSubmissionInfo","problemCodeRender","ps","split","onClick","history","push","UrlPrefix","fontWeight","ModalVis","setModalVis","btnProps","btnText","visible","footer","onCancel","TState","UState","UserReducer","roles","userInfo","isLogin","addTableVersion","setTopSubmission","submissionID","submissionInfo","setSubmissionModalVis","webSocketOpen","setWebSocketOpen","webSocketQueryList","setWebSocketQueryList","refreshDisable","setRefreshDisable","showSubmission","record","problemTitle","TimeLimit","timeLimit","MemoryLimit","memoryLimit","scoreMod","sumScore","testcaseMod","TestCase","caseType","StateList","indexOf","SubmissionMap","append","RunningStep","checkpointNum","publicCheckpointNum","Math","floor","moment","format","fromNow","columnsAll","SyncJudging","open","dataHandle","submissionIdHex","submissionVersion","checkpointIndex","judgeResult","judgeScore","usedTime","usedMemory","dt","Index","value","isValueEmpty","cur_cpt","Set","result","toString","localStorage","setItem","score","runningNumber","parseInt","queryList","lessInfo","minWidth","extra","judgeAuth","ReJudge","rejudge","afterSuccess","icon","ReloadOutlined","message","success","setTimeout","disabled","actions","block","defaultPageSize","showSizeChanger","getForm","onFinish","Item","label","onPressEnter","e","allowClear","RunningResultList","map","Option","v","match","charCodeAt","submitTime","gmtCreate","total","setTotal","PageNow","setPageNow","PageSize","setPageSize","searchText","setSearchText","pageNow","pageSize","searchKey","moreProps","propsTableInfo","tableInfo","form","setFieldsValue","pn","sk","fmp","getFieldsValue","rows","totalNum","totalPage","initRequestProps","values","JSON","stringify","onReset","resetFields","tf","valuesAfter","useList","bordered","cardProps","search","placeholder","onSearch","enterButton","useFormBtn","marginLeft","htmlType","grid","itemLayout","renderItem","page","current","hideOnSinglePage","showQuickJumper","showLessItems","pageSizeOptions"],"mappings":"iGAAA,2FAuJeA,QAAMC,KAAKC,aAjBDC,IAEd,CACHC,UAAW,IAFYD,EAAME,YAEPD,eAIFE,IAAD,CACvBC,aAAc,CAACC,EAAcC,IAAcH,EAAS,CAChDI,KAAM,eACNF,KAAMA,EACNC,KAAMA,IAEVE,cAAe,CAACF,EAAWD,IACvBF,EAAS,CAACI,KAAM,gBAAiBD,KAAMA,EAAMD,KAAMA,EAAMI,KAAK,OAG5CV,CAGpBW,cACEC,aAnIkBC,IACtB,MAAOX,EAAWY,GAAiBC,mBAAS,KACrCC,EAASC,GAAcF,oBAAS,IAChCG,EAAcC,GAAmBJ,mBAAiB,GAInDK,EAAgBb,IAClBO,EAAcP,QAEcc,IAAxBR,EAAMJ,oBAA8CY,IAAfR,EAAMP,MAC3CO,EAAMJ,cAAcF,EAAMM,EAAMP,OAGlCgB,EAAU,KACZL,GAAW,GACXJ,EAAMU,MAAMC,MAAMjB,IAED,OAATA,IAAeA,EAAO,SACKc,IAA3BR,EAAMY,iBACNL,EAAaP,EAAMY,iBAAiBlB,IACjCa,EAAab,GACpBU,GAAW,OAInBS,qBAAU,KACNJ,MACD,CAACT,EAAMP,OAEVoB,qBAAU,KAAO,IAAD,EAEZ,MAAMC,EAAiB,UAAGd,EAAMX,UAAUW,EAAMP,aAAzB,aAAG,EAA6BY,aAGvB,IAAD,OAFLG,IAAtBM,GAAmCT,IAAiBS,IAEhDA,EAAoB,GACpBR,GAAiBQ,GACjBb,EAAa,UAACD,EAAMX,UAAUW,EAAMP,aAAvB,aAAC,EAA6BsB,cAG3CT,EAAgBQ,GAChBL,QAGT,CAACT,EAAMX,UAAWgB,IAIrB,MAAMW,EAAaC,aAAe,IAAM,cAAC,IAAD,CAAcC,MAAO,CAACC,OAAQ,OAAQC,MAAO,YAC/EC,EAAeC,aAAiBtB,GAAe,uBAAQA,MACvDuB,EAAqBC,aAAmBxB,GAAe,0BAAWA,MAElEyB,EAAY,IAAgC,IAA/B,SAACC,EAAD,SAAWC,GAAmB,EAEzCD,IAAaC,IAEbpB,EAAaqB,YAAmBvC,EAAWqC,EAAUC,IACrD3B,EAAM6B,WAAa7B,EAAM6B,UAAUxC,EAAWqC,EAAUC,KAmB1DG,EAAqB,CACvB,CACIC,MAAO,GACPC,UAAW,OACXC,MAAO,GACPC,UAAW,eACXC,OAAQ,IAAM,cAACnB,EAAD,MAItB,IAAIoB,EAAUpC,EAAMoC,QAGpB,OAFIpC,EAAMqC,UAASD,EAAUN,EAAYQ,OAAOF,IAG5C,cAAC,IAAD,IACQpC,EACJuC,aAAcvC,EAAMuC,aACpBC,OAAQxC,EAAMwC,OACdrC,QAASA,EACTsC,KAAMzC,EAAMyC,KACZL,QAASA,EACTrB,WAAY1B,EACZqD,YAAY,EACZC,WAAY,CACRC,KAAM,CACFC,QAzCY7C,GAEpB,cAACuB,EAAD,CACIuB,eAAa,EACbC,mBAAiB,EACjBC,YAAY,eACZvB,UAAWA,KACPzB,IAmCAiD,IA/BS,IAA4C,IAA3C,UAACf,EAAD,MAAYhB,KAAUgC,GAAoB,EAEhE,MAAMC,EAAQ9D,EAAU+D,WAAWC,GAAWA,EAAErD,EAAMwC,UAAYU,EAAU,kBAC5E,OAAO,cAAC7B,EAAD,CAAc8B,MAAOA,KAAWD,eAyDP,CAAClD,EAAYsD,KAAoB,IAAD,IAChE,OAAOtD,EAAMoC,UAAYkB,EAAUlB,UAC9B,UAAApC,EAAMuC,oBAAN,eAAoBgB,gBAAgBC,WAApC,UAA+CF,EAAUf,oBAAzD,aAA+C,EAAwBgB,gBAAgBC,SACxFxD,EAAMX,YAAciE,EAAUjE,WAC9BW,EAAMyD,cAAiBH,EAAUG,gB,kCC/J7C,sEAUA,MAAMC,UAA2BC,YAAqB,cAAD,yBAMjDC,mBAAsBlE,IAClBmE,KAAK7D,MAAM4D,mBAAmBlE,EAAMmE,KAAK7D,MAAMP,OALnDqE,qBAQA3B,SAAU,IAAD,EACL,MAAMoB,EAAkBQ,YAAE,UAACF,KAAK7D,MAAMX,UAAUwE,KAAK7D,MAAMP,aAAjC,aAAC,EAAuC8D,gBAAiB,IACnF,IAAIhB,EAAoB,CACpBgB,kBACAS,SAAWT,IACPM,KAAKD,mBAAmBL,IAG5BU,WAAY,CACR,CACIC,IAAK,MACLC,KAAMN,KAAK7D,MAAMoE,EAAE,eACnBC,SAAWC,IACP,IAAIC,EAAqBD,EACzBC,EAAqBA,EAAmBjC,OAAOiB,EAAgBiB,QAAQN,IAC3DI,EAAkBG,SAASP,MAEvCL,KAAKD,mBAAmBW,KAGhC,CACIL,IAAK,QACLC,KAAMN,KAAK7D,MAAMoE,EAAE,SACnBC,SAAWC,IACP,IAAIC,EAAqBhB,EAAgBiB,QAAQN,IACrCI,EAAkBG,SAASP,KAEvCL,KAAKD,mBAAmBW,KAGhC,CACIL,IAAK,SACLC,KAAMN,KAAK7D,MAAMoE,EAAE,UACnBC,SAAWC,IACP,IAAIC,EAAqBD,EAAkBE,QAAQN,IACvCX,EAAgBkB,SAASP,KAErCK,EAAqBA,EAAmBjC,OAAOiB,EAAgBiB,QAAQN,IAC3DI,EAAkBG,SAASP,MAEvCL,KAAKD,mBAAmBW,OAMxC,OACI,qCACKV,KAAK7D,MAAM0E,YACR,cAAC,IAAD,IACSb,KAAK7D,MACVuC,aAAcsB,KAAK7D,MAAM2E,sBAAmBnE,EAAY+B,KAGrC,IAA1BsB,KAAK7D,MAAM0E,YACR,cAAC,IAAD,IACSb,KAAK7D,MACVuC,aAAcsB,KAAK7D,MAAM2E,sBAAmBnE,EAAY+B,QAqBjEpD,iBAbUC,IAEd,CACHC,UAFuBD,EAAME,YAEXD,cAKEE,IAAD,CACvBqE,mBAAoB,CAAClE,EAAmBD,IACpCF,EAAS,CAACI,KAAM,qBAAsBD,KAAMA,EAAMD,KAAMA,OAGjDN,CAGbW,cACEC,YAAW2D,M,kCCtGf,oEAQA,MAAMkB,UAAqBjB,YAEvBxB,SACI,OACI,mCACI,qBAAKjB,MAAO,CAAC2D,UAAW,SAAUC,OAAQ,UAA1C,SACI,qBAAK5D,MAAO,CAAC2D,UAAW,OAAQE,SAAU,SAAUD,OAAQ,UAA5D,SACI,cAAC,IAAD,CACIrF,KAAM,iBACNuF,SAAS,EACTtE,IAAKuE,IAAKC,kBACVC,mBAAqBC,GACVH,IAAKI,kBAAkB,CAACD,aAAcA,IAEjDE,kBAAoBnB,IAChB,IAAIoB,EAAKpB,EAAKqB,MAAM,KACpB,OACI,eAAC,IAAD,CAAQ7F,KAAM,OAAQ8C,KAAM,QAASgD,QAAS,KAC1C5B,KAAK7D,MAAM0F,QAAQC,KAAKC,IAAY,YAAczB,IADtD,UAGI,sBAAMjD,MAAO,CAAC2E,WAAY,QAA1B,SAAoCN,EAAG,KAH3C,IAGsD,+BAAOA,EAAG,kBAYrFxF,sBAAW6E,I,8PCJX9E,oBAAkBC,aA9BJC,IACzB,MAAO8F,EAAUC,GAAe7F,oBAAkB,GAElD,OACI,qCACI,cAAC,IAAD,IACQF,EAAMgG,SACVP,QAAS,KACLM,GAAY,IAHpB,SAMK/F,EAAMiG,UAEX,cAAC,IAAD,CACIhE,MAAO,KACPiE,QAASJ,EACTK,QAAQ,EACRC,SAAU,KACNL,GAAY,IALpB,SAQI,cAAC,EAAD,IACQ/F,aCsYTb,uBA3BUC,IAAgB,IAAD,EACpC,MAAMiH,EAAqBjH,EAAME,YAC3BgH,EAAoBlH,EAAMmH,YAChC,MAAO,CACHlH,UAAWgH,EAAOhH,UAClBmH,MAAK,UAAEF,EAAOG,gBAAT,aAAE,EAAiBD,MACxBE,QAASJ,EAAOI,YAIInH,IAAD,CACvBoH,gBAAkBlH,GAAiBF,EAAS,CACxCI,KAAM,kBACNF,KAAMA,IAEVmE,mBAAoB,CAAClE,EAAmBD,IACpCF,EAAS,CAACI,KAAM,qBAAsBD,KAAMA,EAAMD,KAAMA,IAC5DG,cAAe,CAACF,EAAWD,IACvBF,EAAS,CAACI,KAAM,gBAAiBD,KAAMA,EAAMD,KAAMA,EAAMI,KAAK,IAClE+G,iBAAkB,CAACC,EAAsBC,IAA0CvH,EAAS,CACxFI,KAAM,mBACNkH,aAAcA,EACdC,eAAgBA,IAEpBC,sBAAwBrH,GAAkBH,EAAS,CAACI,KAAM,wBAAyBD,KAAMA,OAG9EP,CAGbW,cACEC,aAnZoBC,IAAgB,IAAD,IAInC,MAAOgH,EAAeC,GAAoB/G,oBAAkB,IAErDgH,EAAoBC,GAAyBjH,mBAAmB,KAChEkH,EAAgBC,GAAqBnH,oBAAkB,GAExDqD,EAAkBQ,YAAE,UAAC/D,EAAMX,UAAUW,EAAMP,aAAvB,aAAC,EAA6B8D,gBAAiB,IACnExC,EAAagD,YAAE,UAAC/D,EAAMX,UAAUW,EAAMP,aAAvB,aAAC,EAA6BsB,WAAY,IA2DzDuG,EAAkBC,IACpBvH,EAAM4G,iBAAiBW,EAAOnC,aAAc,CACxCrD,MAAOwF,EAAOC,aACdC,UAAWF,EAAOG,UAClBC,YAAaJ,EAAOK,YACpBC,cAA8BrH,IAApB+G,EAAOO,SAAyB,UAAY,OACtDA,SAAUP,EAAOO,SACjBC,YAAa,OACb5C,mBAAoBnF,EAAMmF,qBAE9BnF,EAAM+G,uBAAsB,IAG1B3E,EAAU,CACZ,CACIL,MAAO/B,EAAMoE,EAAE,WACfpC,UAAW,SACXkC,IAAK,SACL/B,OAAQ,CAACgC,EAAWoD,IAEZ,qBAAKrG,MAAO,CAACC,OAAQ,WAAYsE,QAAS,KACtC6B,EAAeC,IADnB,SAGI,cAACS,EAAA,EAAD,CACIrI,KAAM,OACNsI,SAAUC,IAAUC,QAAQC,IAAcjE,IAC1CkE,OACa,OAATlE,EACI,IAAMoD,EAAOe,YAAc,KAAOf,EAAOgB,cAAgBhB,EAAOiB,qBAAuB,IACrF,QAQ9B,CACIzG,MAAO/B,EAAMoE,EAAE,SACfpC,UAAW,QACXkC,IAAK,QACL/B,OAAQ,CAACgC,EAAcoD,SACK/G,IAApB+G,EAAOO,SACA3D,EACJsE,KAAKC,MAAMvE,EAAOoD,EAAOO,SAAW,KAAO,KAG1D,CACI/F,MAAO/B,EAAMoE,EAAE,kBACfpC,UAAW,aACXkC,IAAK,aACL/B,OAASgC,GAED,cAAC,IAAD,CAASpC,MAAO4G,IAAOxE,GAAMyE,OAAO,uBAApC,SACI,+BAAOD,IAAOxE,GAAM0E,gBAOlCC,EAAa,CACf,CACI/G,MAAO,KACPC,UAAW,eACXkC,IAAK,eACL/B,OAAQ,CAACgC,EAAWoD,IACT,cAAC,IAAD,CAAQ5H,KAAM,OAAQ8C,KAAM,QAASgD,QAAS,KACjD6B,EAAeC,IADZ,SAGFpD,KAIb,CACIpC,MAAO/B,EAAMoE,EAAE,YACfpC,UAAW,WACXkC,IAAK,YAET,CACInC,MAAO/B,EAAMoE,EAAE,cACfpC,UAAW,cACXkC,IAAK,cACL/B,OAAQnC,EAAMsF,mBAElB,CACIvD,MAAO/B,EAAMoE,EAAE,eACfpC,UAAW,eACXkC,IAAK,gBAET,CACInC,MAAO/B,EAAMoE,EAAE,WACfpC,UAAW,SACXkC,IAAK,SACLjC,MAAO,IACPE,OAAQ,CAACgC,EAAWoD,IAEZ,qBAAKrG,MAAO,CAACC,OAAQ,WAAYsE,QAAS,KACtC6B,EAAeC,IADnB,SAGI,cAACS,EAAA,EAAD,CACIrI,KAAM,OACNsI,SAAUC,IAAUC,QAAQC,IAAcjE,IAC1CkE,OACa,OAATlE,EACI,IAAMoD,EAAOe,YAAc,KAAOf,EAAOgB,cAAgBhB,EAAOiB,qBAAuB,IACvF,QAO5B,CACIzG,MAAO/B,EAAMoE,EAAE,SACfpC,UAAW,QACXkC,IAAK,QACL/B,OAAQ,CAACgC,EAAcoD,SACK/G,IAApB+G,EAAOO,SACA3D,EACJsE,KAAKC,MAAMvE,EAAOoD,EAAOO,SAAW,KAAO,KAG1D,CACI/F,MAAO/B,EAAMoE,EAAE,YACfpC,UAAW,qBACXkC,IAAK,sBAET,CACInC,MAAO/B,EAAMoE,EAAE,eACfpC,UAAW,aACXkC,IAAK,aACL/B,OAASgC,GACEA,EAAO,OAGtB,CACIpC,MAAO/B,EAAMoE,EAAE,aACfpC,UAAW,WACXkC,IAAK,WACL/B,OAASgC,GACEA,EAAO,OAGtB,CACIpC,MAAO/B,EAAMoE,EAAE,kBACfpC,UAAW,aACXkC,IAAK,aACL/B,OAASgC,GAED,cAAC,IAAD,CAASpC,MAAO4G,IAAOxE,GAAMyE,OAAO,uBAApC,SACI,+BAAOD,IAAOxE,GAAM0E,gBAwDxC,OACI,mCACI,cAAC,IAAD,CACI9G,MACI,eAAC,IAAD,gBACqBvB,IAAhBR,EAAM+B,MAAsB/B,EAAM+B,MAAQ/B,EAAMoE,EAAE,oBACnD,cAAC2E,EAAA,EAAD,CACIC,KAAMhC,EACNiC,WAhRHvJ,IAEjB,MAAMwJ,EAAkBxJ,EAAK,GACvByJ,EAAoBzJ,EAAK,GAEzB0J,EAAkB1J,EAAK,GAEvB2J,EAAc3J,EAAK,GACnB4J,EAAa5J,EAAK,GAClB6J,EAAW7J,EAAK,GAChB8J,EAAa9J,EAAK,GAExB,IAAI+J,EAAK1I,EACT,MAAM2I,EAAQD,EAAGrG,WAAWuG,GAAeA,EAAMvE,eAAiB8D,IAClE,IAAe,IAAXQ,EAAJ,CASA,GANIE,YAAaH,EAAGC,GAAOG,WACvBJ,EAAGC,GAAOG,QAAU,IAAIC,KAKxBV,EAAkB,EAAG,CACrBK,EAAGC,GAAOK,OAASX,EAAgBY,YAEV,IAArBZ,IACAa,aAAaC,QAAS,qBAAoBhB,IAAoB,GAAEC,KAChEM,EAAGC,GAAOK,OAASV,EACnBI,EAAGC,GAAOS,MAAQb,EAClBG,EAAGC,GAAOH,SAAWA,EACrBE,EAAGC,GAAOF,WAAaA,GAG3B,IAAIY,EAAgB,EACpB,IAAK,MAAM/G,KAAKoG,EAAQY,SAAShH,EAAE0G,SAAW,IAAGK,GAAiB,GAC5C,IAAlBA,GAAqBnD,GAAiB,QAE1CwC,EAAGC,GAAOG,QAAQhK,IAAIuJ,GACtBK,EAAGC,GAAOpB,YAAcmB,EAAGC,GAAOG,QAAQpH,KAC1CgH,EAAGC,GAAOS,OAASb,EAcvBtJ,EAAMJ,cAAc6J,EAAIzJ,EAAMP,QA2NV6K,UAAWpD,OAGvBhG,MAAOlB,EAAMuK,SAAW,GAAK,CAACC,SAAU,MACxCtI,UAAWlC,EAAMuK,SAAW,mBAAqB,GACjDE,MACI,eAAC,IAAD,YACwB,IAAnBzK,EAAMuK,UAAqBG,YAAU1K,EAAMwG,MAAO,CAAC,QAAS,gBACzD,cAACmE,EAAA,EAAD,CACIjK,IAAKuE,IAAK2F,QACVlL,KAAM6D,EACNsH,aAAc,KACV7K,EAAM2G,gBAAgB3G,EAAMP,MAC5BO,EAAM4D,mBAAmB,GAAI5D,EAAMP,SAI/C,cAAC,IAAD,CACIqL,KAAM,cAACC,EAAA,EAAD,IACNtF,QAAS,KACL4B,GAAkB,GAClBrH,EAAM2G,gBAAgB3G,EAAMP,MAC5BuL,IAAQC,QAAQjL,EAAMoE,EAAE,wBACxB8G,YAAW,KACP7D,GAAkB,KACnB,MAEP8D,SAAU/D,EAVd,SAYKpH,EAAMoE,EAAE,gBAIrBgH,QAAUpL,EAAMuK,UAAYvK,EAAM0G,QAAW,CACzC,8BACK1G,EAAMuK,UAAYvK,EAAM0G,SACrB,cAAC,EAAD,CACIV,SAAU,CAACrG,KAAM,OAAQ0L,OAAO,GAChCpF,QAASjG,EAAMoE,EAAE,sBACjB3E,KAAM,sBAAwBO,EAAMP,KACpCiB,IAAKV,EAAMU,IACXyE,mBAAoBnF,EAAMmF,6BAItC3E,EApDR,SAsDI,cAACkD,EAAA,EAAD,CACIiB,iBAAkB3E,EAAMuK,WAAaG,YAAU1K,EAAMwG,MAAO,CAAC,QAAS,eACtE8E,gBAAiBtL,EAAMuK,SAAW,OAAI/J,EACtC+K,iBAAiBvL,EAAMuK,eAAmB/J,EAC1CkC,YAAY1C,EAAMuK,eAAmB/J,EACrC4B,QAASpC,EAAMuK,SAAWnI,EAAU0G,EACpC0C,SAA2B,IAAlBxL,EAAMgF,QA/GdyG,GAET,eAAC,IAAD,CAAOhJ,KAAM,GAAb,UACI,cAAC,IAAKiJ,KAAN,CAAWC,MAAO3L,EAAMoE,EAAE,YAAa3E,KAAM,WAA7C,SACI,cAAC,IAAD,CACImM,aAAeC,IACXJ,KAEJK,YAAU,MAGlB,cAAC,IAAKJ,KAAN,CAAWC,MAAO3L,EAAMoE,EAAE,cAAe3E,KAAM,cAA/C,SACI,cAAC,IAAD,CACImM,aAAeC,IACXJ,KAEJK,YAAU,MAGlB,cAAC,IAAKJ,KAAN,CAAWC,MAAO3L,EAAMoE,EAAE,eAAgB3E,KAAM,cAAhD,SACI,cAAC,IAAD,CAAQuE,SAAUyH,EAAUK,YAAU,EAAC5K,MAAO,CAACe,MAAO,KAAtD,SAEQ8J,IAAkBC,KAAKrC,GACZ,cAAC,IAAOsC,OAAR,CAAetC,MAAOU,SAASV,GAA/B,SACH,cAAC3B,EAAA,EAAD,CAAUrI,KAAM,OACNsI,SAAUC,IAAUC,QAAQC,IAAcuB,sBAsFxBnJ,EAC5Cf,KAAMO,EAAMP,KACZgD,KAAM,QACND,OAAQ,eACR9B,IAhFHhB,IACT,GAAI,gBAAiBA,IAASkK,YAAalK,EAAI,aAAkB,CAC7D,IAAIwM,EAAYxM,EAAI,YACH,IAAbwM,EAAE1I,QACyB,OAAvB0I,EAAEC,MAAM,aAAqBD,GAAKA,EAAEE,WAAW,GAAK,IAAIA,WAAW,GAAK,GAAGpC,YACpD,OAAvBkC,EAAEC,MAAM,aAAqBD,GAAKA,EAAEE,WAAW,GAAK,IAAIA,WAAW,GAAK,GAAGpC,aAC9C,OAA1BkC,EAAEC,MAAM,gBACfD,EAAI,SAAWA,GAEnBxM,EAAI,YAAkBwM,EAE1B,OAAOlM,EAAMU,IAAIhB,IAsELkB,iBAAmB+I,IACXC,YAAaD,KAAQA,EAAQ,IACjC,IAAIzC,EAAqB,GACrBxH,EAAY,GAChB,IAAK,MAAM2D,KAAKsG,EACRtG,EAAEgG,aAAe,GAAGnC,EAAmBvB,KAAKtC,EAAE+B,cAClD1F,EAAKiG,KAAK,IACHtC,EACH8G,MAAO9G,EAAEiG,WACThB,YAAa,EACbyB,OAAQ1G,EAAEgG,YAAYW,WAEtBlC,SAAUzE,EAAEyE,SACZuE,WAAYhC,SAAShH,EAAEiJ,aAO/B,OAJkC,IAA9BpF,EAAmB1D,SACnByD,GAAiB,GACjBE,EAAsBD,IAEnBxH,e,iCC9X/B,oIA2SeP,iBAnBUC,IAAgB,IAAD,EACpC,MAAMkH,EAAoBlH,EAAMmH,YAC1BF,EAAqBjH,EAAME,YACjC,MAAO,CACHkH,MAAK,UAAEF,EAAOG,gBAAT,aAAE,EAAiBD,MACxBnH,UAAW,IAAIgH,EAAOhH,eAIFE,IAAD,CACvBC,aAAc,CAACC,EAAcC,IAAcH,EAAS,CAChDI,KAAM,eACNF,KAAMA,EACNC,KAAMA,IAEVE,cAAe,CAACF,EAAWD,IACvBF,EAAS,CAACI,KAAM,gBAAiBD,KAAMA,EAAMD,KAAMA,EAAMI,KAAK,OAGvDV,CAGbW,cACEC,aAjRyBC,IAAgB,IAAD,IACxC,MAAOuM,EAAOC,GAAYtM,mBAAiB,IACpCb,EAAWY,GAAiBC,sBAC5BC,EAASC,GAAcF,oBAAS,IAChCuM,EAASC,GAAcxM,mBAAiB,IACxCyM,EAAUC,GAAe1M,mBAAiB6D,YAAG/D,EAAMsL,gBAAiBA,OACpEuB,EAAYC,GAAiB5M,sBAC7BG,EAAcC,GAAmBJ,mBAAiB,GAEnDK,EAAgBb,IAClBO,EAAcP,QAEcc,IAAxBR,EAAMJ,oBAA8CY,IAAfR,EAAMP,MAC3CO,EAAMJ,cAAcF,EAAMM,EAAMP,OAGlCgB,EAAU,CAACsM,EAAkBC,EAAmBC,EAAoBC,KAAqB,IAAD,UAC1F,MAAMC,EAAc,UAAGnN,EAAMX,UAAUW,EAAMP,aAAzB,aAAG,EAA6B2N,UACjB,IAAD,aAAX5M,IAAnB2M,SACkB3M,IAAd0M,QAAwD1M,IAA7B2M,EAAeD,WAC1CG,EAAKC,eAAeH,EAAeD,WAEvCH,EAAO,UAAGA,SAAH,QAAcI,EAAeJ,QACpCC,EAAQ,UAAGA,SAAH,QAAeG,EAAeH,SACtCC,EAAS,UAAGA,SAAH,QAAgBE,EAAeF,UACxCC,EAAS,UAAGA,SAAH,QAAgBC,EAAeD,WAE5C,IAAIK,EAAE,UAAGR,SAAH,QAAcN,EAChBlH,EAAE,UAAGyH,SAAH,QAAeL,EACjBa,EAAE,UAAGP,SAAH,QAAgBJ,EAClBY,EAAG,UAAGP,SAAH,QAAgBG,EAAKK,iBAC5BhB,EAAWa,GACXX,EAAYrH,GACZuH,EAAcU,GACdpN,GAAW,GACXJ,EAAMU,IAAI,CACNqM,QAASQ,EACTP,SAAUzH,EACV0H,UAAWO,KACRC,IACJ9M,MAAMjB,IAEa,OAAdA,EAAKiO,OAAejO,EAAKiO,KAAO,SACLnN,IAA3BR,EAAMY,iBACNL,EAAaP,EAAMY,iBAAiBlB,EAAKiO,OACtCpN,EAAab,EAAKiO,WACHnN,IAAlBd,EAAKkO,UAA4C,MAAlBlO,EAAKkO,UACpCpB,EAAS9M,EAAKkO,UACd5N,EAAMP,MAAQO,EAAMR,aAAaQ,EAAMP,KAAM,CACzC8M,MAAO7M,EAAKkO,SACZb,QAASQ,EACTP,SAAUzH,EACV0H,UAAWO,EACXN,UAAWO,MAGfjB,EAASjH,EAAK7F,EAAKmO,WACnB7N,EAAMP,MAAQO,EAAMR,aAAaQ,EAAMP,KAAM,CACzC8M,MAAOhH,EAAK7F,EAAKmO,UACjBd,QAASQ,EACTP,SAAUzH,EACV0H,UAAWO,EACXN,UAAWO,KAGnBrN,GAAW,OAInBS,qBAAU,KACNwM,EAAKC,eAAetN,EAAM8N,kBAC1BrN,MACD,CAACT,EAAMP,OAGV,MAAO4N,GAAQrI,cACTyG,EAAW,KACb,MAAMsC,EAASV,EAAKK,iBACW,OAA3BM,KAAKC,UAAUF,IACftN,EAAQ,EAAGkM,OAAUnM,EAAWuN,IAElCG,EAAU,KAAO,IAAD,EAClB,MAAMH,EAASV,EAAKK,iBACpBL,EAAKc,cACL,MAAMC,EAAE,UAAGpO,EAAMX,UAAUW,EAAMP,aAAzB,aAAG,EAA6B2N,UACxCpN,EAAMP,MAAQO,EAAMR,aAAaQ,EAAMP,KAAM,CACzC8M,MAAO6B,EAAG7B,MACVQ,QAASqB,EAAGrB,QACZC,SAAUoB,EAAGpB,SACbC,UAAWmB,EAAGnB,UACdC,eAAW1M,IAEf,MAAM6N,EAAchB,EAAKK,iBAErBM,KAAKC,UAAUF,KAAYC,KAAKC,UAAUI,IAC1C5N,EAAQ,EAAGkM,OAAUnM,OAAWA,IAsBxC,OAjBAK,qBAAU,KAAO,IAAD,EAEZ,MAAMC,EAAiB,UAAGd,EAAMX,UAAUW,EAAMP,aAAzB,aAAG,EAA6BY,aACvD,QAA0BG,IAAtBM,GAAmCT,IAAiBS,EAEpD,GAAIA,EAAoB,EAAG,CAAC,IAAD,EACvBR,GAAiBQ,GACjBb,EAAa,UAACD,EAAMX,UAAUW,EAAMP,aAAvB,aAAC,EAA6BsB,gBACxC,CAEHT,EAAgBQ,GAChB,MAAMiN,EAASV,EAAKK,iBACpBjN,EAAQgM,EAASE,EAAUE,EAAYkB,MAGhD,CAAC/N,EAAMX,UAAWgB,IAGjB,qCACKL,EAAMsO,SACH,cAAC,IAAD,CACIvM,MAAO/B,EAAM+B,MACbwM,UAAU,EACV9L,KAAM,UACNP,UAAS,UAAElC,EAAMwO,iBAAR,QAAqB,sBAC9B/D,QACsB,IAAjBzK,EAAMyO,aAAqCjO,IAAlBR,EAAMwL,UAC5B,sCACsB,IAAjBxL,EAAMyO,QACH,cAAC,IAAD,CAEIC,YAAa1O,EAAMoE,EAAE,cACrBuK,SAAWxK,IACP2I,EAAc3I,GACduI,EAAW,GACX,MAAMqB,EAASV,EAAKK,iBACpBjN,EAAQ,EAAGkM,EAAUxI,EAAM4J,IAE/Ba,aAAW,EACX1N,MAAO,CAACe,MAAO,MATV,eAYMzB,IAAlBR,EAAMwL,SACH,eAAC,IAAD,CAAM6B,KAAMA,EAAZ,UACKrN,EAAMwL,QAAQC,GACdzL,EAAM6O,YACH,eAAC,IAAD,CAAO3N,MAAO,CAAC4N,WAAY,QAASrM,KAAM,GAA1C,UACI,cAAC,IAAD,CAAQ9C,KAAK,UAAU8F,QAASgG,EAAhC,0BAGA,cAAC,IAAD,CAAQsD,SAAS,SAAStJ,QAASyI,EAAnC,mCA9BhC,SAyCI,cAAC,IAAD,CACIc,KAAMhP,EAAMgP,KACZC,WAAY,WACZ9O,QAASA,EACTsC,KAAMzC,EAAMyC,KACZ1B,WAAY1B,EACZ6P,WAAYlP,EAAMkP,WAClBxM,WAAY,CACRsB,SAAU,CAACmL,EAAMnC,KACbvM,EAAQ0O,EAAMnC,IAElBoC,QAAS3C,EACTO,SAAUL,EACVJ,MAAOA,EACP9J,KAAM,QACN4M,kBAAkB,EAClBC,iBAAiB,EACjBC,eAAe,EACfhE,gBAAiBxH,YAAG/D,EAAMuL,iBAAiB,GAC3CiE,gBAAiB,CAAC,IAAK,KAAM,KAAM,KAAM,YAKvDxP,EAAMsO,SACJ,cAAC,IAAD,CACIC,UAAU,EACV9L,KAAM,QACNgI,QACsB,IAAjBzK,EAAMyO,aAAqCjO,IAAlBR,EAAMwL,UAC5B,sCACsB,IAAjBxL,EAAMyO,QACH,cAAC,IAAD,CAEIC,YAAa,eACbC,SAAWxK,IACP2I,EAAc3I,GACduI,EAAW,GACXjM,EAAQ,EAAGkM,EAAUxI,IAEzByK,aAAW,EACX1N,MAAO,CAACe,MAAO,MARV,eAWMzB,IAAlBR,EAAMwL,SACH,eAAC,IAAD,CAAM6B,KAAMA,EAAZ,UACKrN,EAAMwL,QAAQC,GACf,eAAC,IAAD,CAAOvK,MAAO,CAAC4N,WAAY,QAASrM,KAAM,GAA1C,UACI,cAAC,IAAD,CAAQ9C,KAAK,UAAU8F,QAASgG,EAAhC,SACKzL,EAAMoE,EAAE,eAEb,cAAC,IAAD,CAAQ2K,SAAS,SAAStJ,QAASyI,EAAnC,SACKlO,EAAMoE,EAAE,oBA3BzC,SAoCI,cAAC,IAAD,CACI5B,OAAQxC,EAAMwC,OACdrC,QAASA,EACTsC,KAAMzC,EAAMyC,KACZL,QAASpC,EAAMoC,QACfG,aAAcvC,EAAMuC,aACpBxB,WAAY1B,EACZqD,WAAU,UAAE1C,EAAM0C,kBAAR,QAAsB,CAC5BsB,SAAU,CAACmL,EAAMnC,KACbvM,EAAQ0O,EAAMnC,IAElBoC,QAAS3C,EACTO,SAAUL,EACVJ,MAAOA,EACP8C,kBAAkB,EAClBC,iBAAiB,EACjBC,eAAe,EACfhE,gBAAiBxH,YAAG/D,EAAMuL,iBAAiB,GAC3CiE,gBAAiB,CAAC,IAAK,KAAM,KAAM,KAAM","file":"static/js/9.8d83e473.chunk.js","sourcesContent":["import {Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {SizeType} from \"antd/lib/config-provider/SizeContext\";\nimport {ColumnsType} from \"antd/lib/table/interface\";\nimport {SortableContainer, SortableElement, SortableHandle} from \"react-sortable-hoc\";\nimport {MenuOutlined} from \"@ant-design/icons\";\nimport {arrayMoveImmutable} from \"array-move\";\n\nexport interface TableWithPaginationProps {\n    API: any                  // 表格查询数据的接口\n    size: SizeType            // 表格的大小\n    columns: ColumnsType<any> // 表格的列\n    name: string              // 表格名称\n    APIRowsTransForm?: any    // 针对API传输的数据进行转化的函数\n\n    // 面向 可选择的行 开放的接口\n    rowKey?: any              // 作为 key 记录的值\n\n}\n\nconst TableWithAllData = (props: any) => {\n    const [tableData, setTableDataX] = useState([])                            // 表格核心数据\n    const [loading, setLoading] = useState(true)                    // 表格的加载状态\n    const [tableVersion, setTableVersion] = useState<number>(0)     // 表格版本（控制表格刷新）\n    // const [sortSwitch, setSortSwitch] = useState<boolean>(false);           // 操作是否开启排序模式\n\n\n    const setTableData = (data: any) => {\n        setTableDataX(data)\n        // 若有 选中行 的相关配置，传递数据进行更新\n        if (props.setDataSource !== undefined && props.name !== undefined)\n            props.setDataSource(data, props.name)\n    }\n\n    const getInfo = () => {\n        setLoading(true)\n        props.API().then((data: any) => {\n            // console.log(\"data\", data)\n            if (data === null) data = []\n            if (props.APIRowsTransForm !== undefined) {\n                setTableData(props.APIRowsTransForm(data))\n            } else setTableData(data)\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        getInfo()\n    }, [props.name])\n\n    useEffect(() => {\n        // 监听表格的版本变化，当版本变更时更新表格\n        const propsTableVersion = props.tableData[props.name]?.tableVersion\n        if (propsTableVersion !== undefined && tableVersion !== propsTableVersion) {\n            // 如果数据被外部应用更新，则用 redux 中的数据更新当前行\n            if (propsTableVersion < 0) {\n                setTableVersion(-propsTableVersion)\n                setTableDataX(props.tableData[props.name]?.dataSource)\n            } else {\n                // 否则，重新进行请求\n                setTableVersion(propsTableVersion)\n                getInfo()\n            }\n        }\n    }, [props.tableData, tableVersion])\n\n    // === 拖拽排序 ===\n    // 可拖拽的排序手柄\n    const DragHandle = SortableHandle(() => <MenuOutlined style={{cursor: 'grab', color: '#999'}}/>);\n    const SortableItem = SortableElement((props: any) => <tr {...props} />);\n    const XSortableContainer = SortableContainer((props: any) => <tbody {...props} />);\n    // 排序结束后\n    const onSortEnd = ({oldIndex, newIndex}: any) => {\n        // 当前排序是有效的\n        if (oldIndex !== newIndex) {\n            // 移动数组中的元素，并设置到当前的状态\n            setTableData(arrayMoveImmutable(tableData, oldIndex, newIndex))\n            props.afterDrag && props.afterDrag(tableData, oldIndex, newIndex)\n        }\n    };\n    const DraggableContainer = (props: any) => {\n        return (\n            <XSortableContainer\n                useDragHandle\n                disableAutoscroll\n                helperClass=\"row-dragging\"\n                onSortEnd={onSortEnd}\n                {...props}\n            />\n        )\n    }\n    const DraggableBodyRow = ({className, style, ...restProps}: any) => {\n        // function findIndex base on Table rowKey props and should always be a right array index\n        const index = tableData.findIndex((x: any) => x[props.rowKey] === restProps['data-row-key']);\n        return <SortableItem index={index} {...restProps} />\n    };\n    const sortColumns: any[] = [\n        {\n            title: \"\",\n            dataIndex: 'sort',\n            width: 50,\n            className: \"drag-visable\",\n            render: () => <DragHandle/>,\n        }\n    ]\n\n    let columns = props.columns;\n    if (props.useDrag) columns = sortColumns.concat(columns)\n\n    return (\n        <Table\n            {...props}\n            rowSelection={props.rowSelection}\n            rowKey={props.rowKey}\n            loading={loading}\n            size={props.size}\n            columns={columns}\n            dataSource={tableData}\n            pagination={false}\n            components={{\n                body: {\n                    wrapper: DraggableContainer,\n                    row: DraggableBodyRow,\n                },\n            }}\n        />\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    return {\n        tableData: {...TState.tableData}\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setTableInfo: (name: string, data: any) => dispatch({\n        type: \"setTableInfo\",\n        name: name,\n        data: data\n    }),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: false})\n})\n\nexport default React.memo(connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(withTranslation()(\n        withRouter(TableWithAllData))), (props: any, nextProps: any) => {\n        return props.columns === nextProps.columns &&\n            (props.rowSelection?.selectedRowKeys.length === nextProps.rowSelection?.selectedRowKeys.length) &&\n            props.tableData === nextProps.tableData &&\n            props.updateTrick ===  nextProps.updateTrick\n    }\n)\n\n","import React, {Component, Dispatch} from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport TableWithPagination from \"./TableWithPagination\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck} from \"../../../Utils/empty\";\nimport TableWithAllData from \"./TableWithAllData\";\n\n\nclass TableWithSelection extends Component<any, any> {\n\n    componentDidMount() {\n\n    }\n\n    setSelectedRowKeys = (data: any) =>{\n        this.props.setSelectedRowKeys(data, this.props.name)\n    }\n\n    render() {\n        const selectedRowKeys = ck(this.props.tableData[this.props.name]?.selectedRowKeys, [])\n        let rowSelection: any = {\n            selectedRowKeys,\n            onChange: (selectedRowKeys: React.Key[]) => {\n                this.setSelectedRowKeys(selectedRowKeys)\n            },\n            // 多选时的下拉选项\n            selections: [\n                {\n                    key: 'all',\n                    text: this.props.t(\"selectedAll\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = changeableRowKeys\n                        newSelectedRowKeys = newSelectedRowKeys.concat(selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        }))\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n                {\n                    key: 'clear',\n                    text: this.props.t(\"clear\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        })\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n                {\n                    key: 'invert',\n                    text: this.props.t(\"invert\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = changeableRowKeys.filter((key:React.Key) => {\n                            return !selectedRowKeys.includes(key);\n                        });\n                        newSelectedRowKeys = newSelectedRowKeys.concat(selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        }))\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n            ]\n        };\n\n        return (\n            <>\n                {this.props.uesAlldata && (\n                    <TableWithAllData\n                        {... this.props}\n                        rowSelection={this.props.disableSelection ? undefined : rowSelection}\n                    />\n                )}\n                {this.props.uesAlldata !== true && (\n                    <TableWithPagination\n                        {... this.props}\n                        rowSelection={this.props.disableSelection ? undefined : rowSelection}\n                    />\n                )}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    return {\n        tableData: TState.tableData\n    }\n\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setSelectedRowKeys: (data: React.Key[], name: string) =>\n        dispatch({type: \"setSelectedRowKeys\", data: data, name: name}),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(TableWithSelection)\n))\n\n","import React, {Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport SubmissionList from \"../../Component/submission/SubmissionList/SubmissionList\";\nimport cApi from \"../../Utils/API/c-api\";\nimport {Button} from \"antd\";\nimport {UrlPrefix} from \"../../Config/constValue\";\n\n\nclass CSubmissions extends Component<any, any> {\n\n    render() {\n        return (\n            <>\n                <div style={{textAlign: \"center\", margin: \"0 auto\"}}>\n                    <div style={{textAlign: \"left\", maxWidth: \"1500px\", margin: \"0 auto\"}}>\n                        <SubmissionList\n                            name={\"BaseSubmission\"}\n                            useForm={true}\n                            API={cApi.getSubmissionList}\n                            QuerySubmissionAPI={(submissionId: string) => {\n                                return cApi.getSubmissionInfo({submissionId: submissionId})\n                            }}\n                            problemCodeRender={(text: any) => {\n                                let ps = text.split(\"-\")\n                                return (\n                                    <Button type={\"text\"} size={\"small\"} onClick={() => {\n                                        this.props.history.push(UrlPrefix + \"/problem/\" + text)\n                                    }}>\n                                        <span style={{fontWeight: \"bold\"}}>{ps[0]}</span>-<span>{ps[1]}</span>\n                                    </Button>\n                                )\n                            }}\n                        />\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default withRouter(CSubmissions)","import {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport React, {useState} from \"react\";\nimport {Button, Modal} from \"antd\";\nimport SubmissionList from \"./SubmissionList\";\n\nconst ModalSubmissionList = (props: any) => {\n    const [ModalVis, setModalVis] = useState<boolean>(false);\n\n    return (\n        <>\n            <Button\n                {...props.btnProps}\n                onClick={() => {\n                    setModalVis(true)\n                }}\n            >\n                {props.btnText}\n            </Button>\n            <Modal\n                width={1250}\n                visible={ModalVis}\n                footer={false}\n                onCancel={() => {\n                    setModalVis(false)\n                }}\n            >\n                <SubmissionList\n                    {...props}\n                />\n            </Modal>\n        </>\n\n    )\n}\n\nexport default withTranslation()(withRouter(ModalSubmissionList))","import {withTranslation} from \"react-i18next\";\nimport {Button, Card, Form, Input, message, Select, Space, Tooltip} from \"antd\";\nimport {SyncJudging} from \"../SyncJudging\";\nimport cApi from \"../../../Utils/API/c-api\";\nimport {ReloadOutlined} from \"@ant-design/icons\";\nimport {RunningResultList, StateList, SubmissionMap, TopSubmissionInfoType} from \"../../../Type/ISubmission\";\nimport TestCase from \"../TestCase\";\nimport React, {Dispatch, useState} from \"react\";\nimport moment from \"moment\";\nimport TableWithSelection from \"../../common/Table/TableWithSelection\";\nimport ReJudge from \"../Func/ReJudge\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck, isValueEmpty} from \"../../../Utils/empty\";\nimport {UserState} from \"../../../Type/Iuser\";\nimport judgeAuth from \"../../../Utils/judgeAhtu\";\nimport ModalSubmissionList from \"./ModalSubmissionList\";\n\nconst SubmissionList = (props: any) => {\n\n    // 为了动态显示评测点信息，使用 ws 与后端进行链接\n    // ws 是否打开\n    const [webSocketOpen, setWebSocketOpen] = useState<boolean>(false)\n    // ws 发送的信息（在打开时，当前数据的变更将同步发送至 ws）\n    const [webSocketQueryList, setWebSocketQueryList] = useState<string[]>([])\n    const [refreshDisable, setRefreshDisable] = useState<boolean>(false)\n\n    const selectedRowKeys = ck(props.tableData[props.name]?.selectedRowKeys, [])\n    const dataSource = ck(props.tableData[props.name]?.dataSource, [])\n\n    const addCaseInfo = (data: any[]) => {\n\n        const submissionIdHex = data[0]\n        const submissionVersion = data[1]\n        // const checkpointType = data[2]\n        const checkpointIndex = data[3]\n        // const checkpointId = data[4]\n        const judgeResult = data[5]\n        const judgeScore = data[6]\n        const usedTime = data[7]\n        const usedMemory = data[8]\n\n        let dt = dataSource\n        const Index = dt.findIndex((value: any) => value.submissionId === submissionIdHex)\n        if (Index === -1) return\n\n        // 信息如果不存在，初始化信息\n        if (isValueEmpty(dt[Index].cur_cpt)) {\n            dt[Index].cur_cpt = new Set();\n        }\n\n        // 当 checkpointIndex < 0 时，表示同步运行状态\n        // -4: Queueing, -3: Compiling, -2: Judging, -1: End\n        if (checkpointIndex < 0) {\n            dt[Index].result = checkpointIndex.toString()\n            // 结束时，填写评测信息\n            if (checkpointIndex === -1) {\n                localStorage.setItem(`submissionVersion:${submissionIdHex}`, `${submissionVersion}`)\n                dt[Index].result = judgeResult\n                dt[Index].score = judgeScore\n                dt[Index].usedTime = usedTime\n                dt[Index].usedMemory = usedMemory\n            }\n            // 扫描全部评测，检查还有没有未更新完的\n            let runningNumber = 0\n            for (const x of dt) if (parseInt(x.result) <= 0) runningNumber += 1\n            if (runningNumber === 0) setWebSocketOpen(false)\n        } else { // 否则表示同步评测点信息\n            dt[Index].cur_cpt.add(checkpointIndex)\n            dt[Index].RunningStep = dt[Index].cur_cpt.size\n            dt[Index].score += judgeScore\n\n            // 老版本的评测点信息同步\n            // let nowID = 0\n            // if (checkpointType === 0) {\n            //     nowID = checkpointIndex + 1\n            // } else if (checkpointType === 1) {\n            //     nowID = dt[Index].checkpointNum + checkpointIndex + 1\n            // }\n            // if (dt[Index].RunningStep < nowID) {\n            //     dt[Index].RunningStep = nowID\n            //     dt[Index].score += judgeScore\n            // }\n        }\n        props.setDataSource(dt, props.name)\n    }\n\n    const showSubmission = (record: any) => {\n        props.setTopSubmission(record.submissionId, {\n            title: record.problemTitle,\n            TimeLimit: record.timeLimit,\n            MemoryLimit: record.memoryLimit,\n            scoreMod: record.sumScore === undefined ? \"disable\" : \"show\",\n            sumScore: record.sumScore,\n            testcaseMod: \"show\",\n            QuerySubmissionAPI: props.QuerySubmissionAPI\n        })\n        props.setSubmissionModalVis(true)\n    }\n\n    const columns = [\n        {\n            title: props.t(\"results\"),\n            dataIndex: \"result\",\n            key: \"result\",\n            render: (text: any, record: any) => {\n                return (\n                    <div style={{cursor: 'pointer'}} onClick={() => {\n                        showSubmission(record)\n                    }}>\n                        <TestCase\n                            type={\"text\"}\n                            caseType={StateList.indexOf(SubmissionMap[text])}\n                            append={\n                                text === \"-2\" ?\n                                    \"(\" + record.RunningStep + \"/\" + (record.checkpointNum + record.publicCheckpointNum) + \")\"\n                                    : \"\"\n                            }\n                        />\n                    </div>\n\n                )\n            }\n        },\n        {\n            title: props.t(\"score\"),\n            dataIndex: \"score\",\n            key: \"score\",\n            render: (text: number, record: any) => {\n                if (record.sumScore === undefined)\n                    return text\n                return Math.floor(text / record.sumScore * 100) + \"%\"\n            }\n        },\n        {\n            title: props.t(\"submissionTime\"),\n            dataIndex: \"submitTime\",\n            key: \"submitTime\",\n            render: (text: any) => {\n                return (\n                    <Tooltip title={moment(text).format('YYYY-MM-DD HH:mm:ss')}>\n                        <span>{moment(text).fromNow()}</span>\n                    </Tooltip>\n                )\n            }\n        }\n    ]\n\n    const columnsAll = [\n        {\n            title: \"ID\",\n            dataIndex: \"submissionId\",\n            key: \"submissionId\",\n            render: (text: any, record: any) => {\n                return <Button type={\"link\"} size={\"small\"} onClick={() => {\n                    showSubmission(record)\n                }}>\n                    {text}\n                </Button>\n            }\n        },\n        {\n            title: props.t(\"username\"),\n            dataIndex: \"username\",\n            key: \"username\"\n        },\n        {\n            title: props.t(\"problemNo.\"),\n            dataIndex: \"problemCode\",\n            key: \"problemCode\",\n            render: props.problemCodeRender\n        },\n        {\n            title: props.t(\"problemName\"),\n            dataIndex: \"problemTitle\",\n            key: \"problemTitle\"\n        },\n        {\n            title: props.t(\"results\"),\n            dataIndex: \"result\",\n            key: \"result\",\n            width: 170,\n            render: (text: any, record: any) => {\n                return (\n                    <div style={{cursor: 'pointer'}} onClick={() => {\n                        showSubmission(record)\n                    }}>\n                        <TestCase\n                            type={\"text\"}\n                            caseType={StateList.indexOf(SubmissionMap[text])}\n                            append={\n                                text === \"-2\" ?\n                                    \"(\" + record.RunningStep + \"/\" + (record.checkpointNum + record.publicCheckpointNum) + \")\" :\n                                    \"\"\n                            }\n                        />\n                    </div>\n                )\n            }\n        },\n        {\n            title: props.t(\"score\"),\n            dataIndex: \"score\",\n            key: \"score\",\n            render: (text: number, record: any) => {\n                if (record.sumScore === undefined)\n                    return text\n                return Math.floor(text / record.sumScore * 100) + \"%\"\n            }\n        },\n        {\n            title: props.t(\"template\"),\n            dataIndex: \"judgeTemplateTitle\",\n            key: \"judgeTemplateTitle\"\n        },\n        {\n            title: props.t(\"memoryUsage\"),\n            dataIndex: \"usedMemory\",\n            key: \"usedMemory\",\n            render: (text: any) => {\n                return text + \" KB\"\n            }\n        },\n        {\n            title: props.t(\"timeUsage\"),\n            dataIndex: \"usedTime\",\n            key: \"usedTime\",\n            render: (text: any) => {\n                return text + \" ms\"\n            }\n        },\n        {\n            title: props.t(\"submissionTime\"),\n            dataIndex: \"submitTime\",\n            key: \"submitTime\",\n            render: (text: any) => {\n                return (\n                    <Tooltip title={moment(text).format('YYYY-MM-DD HH:mm:ss')}>\n                        <span>{moment(text).fromNow()}</span>\n                    </Tooltip>\n                )\n            }\n        }\n    ]\n\n    const getForm = (onFinish: any) => {\n        return (\n            <Space size={30}>\n                <Form.Item label={props.t(\"username\")} name={\"username\"}>\n                    <Input\n                        onPressEnter={(e: any) => {\n                            onFinish()\n                        }}\n                        allowClear\n                    />\n                </Form.Item>\n                <Form.Item label={props.t(\"problemNo.\")} name={\"problemCode\"}>\n                    <Input\n                        onPressEnter={(e: any) => {\n                            onFinish()\n                        }}\n                        allowClear\n                    />\n                </Form.Item>\n                <Form.Item label={props.t(\"JudgeResult\")} name={\"judgeResult\"}>\n                    <Select onChange={onFinish} allowClear style={{width: 200}}>\n                        {\n                            RunningResultList.map((value) => {\n                                return <Select.Option value={parseInt(value)}>\n                                    <TestCase type={\"text\"}\n                                              caseType={StateList.indexOf(SubmissionMap[value])}/>\n                                </Select.Option>\n                            })\n                        }\n                    </Select>\n                </Form.Item>\n            </Space>\n        )\n    }\n\n    const API = (data: any) => {\n        if (\"problemCode\" in data && !isValueEmpty(data[\"problemCode\"])) {\n            let v: string = data[\"problemCode\"]\n            if (v.length === 1) {\n                if (v.match(/^[a-z]$/) !== null) v = (v.charCodeAt(0) - 'a'.charCodeAt(0) + 1).toString()\n                if (v.match(/^[A-Z]$/) !== null) v = (v.charCodeAt(0) - 'A'.charCodeAt(0) + 1).toString()\n            } else if (v.match(/^[0-9]{4}$/) !== null) {\n                v = \"SDUOJ-\" + v\n            }\n            data[\"problemCode\"] = v\n        }\n        return props.API(data)\n    }\n\n    return (\n        <>\n            <Card\n                title={\n                    <Space>\n                        {props.title !== undefined ? props.title : props.t(\"submissionRecord\")}\n                        <SyncJudging\n                            open={webSocketOpen}\n                            dataHandle={addCaseInfo}\n                            queryList={webSocketQueryList}/>\n                    </Space>\n                }\n                style={props.lessInfo ? {} : {minWidth: 1200}}\n                className={props.lessInfo ? \"smallBodyPadding\" : \"\"}\n                extra={\n                    <Space>\n                        {props.lessInfo !== true && judgeAuth(props.roles, [\"admin\", \"superadmin\"]) && (\n                            <ReJudge\n                                API={cApi.rejudge}\n                                data={selectedRowKeys}\n                                afterSuccess={() => {\n                                    props.addTableVersion(props.name)\n                                    props.setSelectedRowKeys([], props.name)\n                                }}\n                            />\n                        )}\n                        <Button\n                            icon={<ReloadOutlined/>}\n                            onClick={() => {\n                                setRefreshDisable(true)\n                                props.addTableVersion(props.name)\n                                message.success(props.t(\"refreshSuccessfully\"))\n                                setTimeout(() => {\n                                    setRefreshDisable(false)\n                                }, 3000)\n                            }}\n                            disabled={refreshDisable}\n                        >\n                            {props.t(\"refresh\")}\n                        </Button>\n                    </Space>\n                }\n                actions={(props.lessInfo && props.isLogin) ? [\n                    <div>\n                        {props.lessInfo && props.isLogin && (\n                            <ModalSubmissionList\n                                btnProps={{type: \"text\", block: true}}\n                                btnText={props.t(\"ShowAllInformation\")}\n                                name={\"Pro-SubmissionList-\" + props.name}\n                                API={props.API}\n                                QuerySubmissionAPI={props.QuerySubmissionAPI}\n                            />\n                        )}\n                    </div>\n                ] : undefined}\n            >\n                <TableWithSelection\n                    disableSelection={props.lessInfo || !judgeAuth(props.roles, [\"admin\", \"superadmin\"])}\n                    defaultPageSize={props.lessInfo ? 5 : undefined}\n                    showSizeChanger={props.lessInfo ? false : undefined}\n                    pagination={props.lessInfo ? false : undefined}\n                    columns={props.lessInfo ? columns : columnsAll}\n                    getForm={props.useForm === true ? getForm : undefined}\n                    name={props.name}\n                    size={\"small\"}\n                    rowKey={\"submissionId\"}\n                    API={API}\n                    APIRowsTransForm={(value: any) => {\n                        if (isValueEmpty(value)) value = []\n                        let webSocketQueryList = []\n                        let data: any = []\n                        for (const x of value) {\n                            if (x.judgeResult <= 0) webSocketQueryList.push(x.submissionId)\n                            data.push({\n                                ...x,\n                                score: x.judgeScore,\n                                RunningStep: 0,\n                                result: x.judgeResult.toString(),\n                                // sumScore: ck(x.sumScore, 100),\n                                sumScore: x.sumScore,\n                                submitTime: parseInt(x.gmtCreate),\n                            })\n                        }\n                        if (webSocketQueryList.length !== 0) {\n                            setWebSocketOpen(true)\n                            setWebSocketQueryList(webSocketQueryList)\n                        }\n                        return data\n                    }}\n                />\n            </Card>\n        </>\n    )\n}\n\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    const UState: UserState = state.UserReducer\n    return {\n        tableData: TState.tableData,\n        roles: UState.userInfo?.roles,\n        isLogin: UState.isLogin,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    addTableVersion: (name: string) => dispatch({\n        type: \"addTableVersion\",\n        name: name,\n    }),\n    setSelectedRowKeys: (data: React.Key[], name: string) =>\n        dispatch({type: \"setSelectedRowKeys\", data: data, name: name}),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: true}),\n    setTopSubmission: (submissionID: string, submissionInfo: TopSubmissionInfoType) => dispatch({\n        type: \"setTopSubmission\",\n        submissionID: submissionID,\n        submissionInfo: submissionInfo\n    }),\n    setSubmissionModalVis: (data: boolean) => dispatch({type: \"setSubmissionModalVis\", data: data})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(SubmissionList)\n))\n","import {Button, Card, Form, List, Space, Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {defaultPageSize} from \"../../../Config/constValue\";\nimport {UserState} from \"../../../Type/Iuser\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport Search from \"antd/es/input/Search\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck} from \"../../../Utils/empty\";\nimport {SizeType} from \"antd/lib/config-provider/SizeContext\";\nimport {ColumnsType} from \"antd/lib/table/interface\";\nimport {useForm} from \"antd/es/form/Form\";\n\nexport interface TableWithPaginationProps {\n    API: any                  // 表格查询数据的接口\n    size: SizeType            // 表格的大小\n    columns: ColumnsType<any> // 表格的列\n    name: string              // 表格名称\n    APIRowsTransForm?: any    // 针对API传输的数据进行转化的函数\n    search?: boolean          // 是否开启搜索功能\n    defaultPageSize?: number  // 表格默认的页大小\n\n    // 面向 可选择的行 开放的接口\n    // setDataSource?: any       // 输出当前表格的数据\n    rowKey?: any              // 作为 key 记录的值\n    rowSelection?: any        // 可选列的相关配置\n\n}\n\nconst TableWithPagination = (props: any) => {\n    const [total, setTotal] = useState<number>(0)                   // 项的总数\n    const [tableData, setTableDataX] = useState()                            // 表格核心数据\n    const [loading, setLoading] = useState(true)                    // 表格的加载状态\n    const [PageNow, setPageNow] = useState<number>(1)               // 当前的页码数\n    const [PageSize, setPageSize] = useState<number>(ck(props.defaultPageSize, defaultPageSize))         // 当前的页大小\n    const [searchText, setSearchText] = useState<string | undefined>()        // 搜索的文本\n    const [tableVersion, setTableVersion] = useState<number>(0)     // 表格版本（控制表格刷新）\n\n    const setTableData = (data: any) => {\n        setTableDataX(data)\n        // 若有 选中行 的相关配置，传递数据进行更新\n        if (props.setDataSource !== undefined && props.name !== undefined)\n            props.setDataSource(data, props.name)\n    }\n    // 这里的所有的参数都只能增量的修改，不能删除，删除需要手动更新 redux\n    const getInfo = (pageNow?: number, pageSize?: number, searchKey?: string, moreProps?: any) => {\n        const propsTableInfo = props.tableData[props.name]?.tableInfo\n        if (propsTableInfo !== undefined) {\n            if (moreProps === undefined && propsTableInfo.moreProps !== undefined){\n                form.setFieldsValue(propsTableInfo.moreProps)\n            }\n            pageNow = pageNow ?? propsTableInfo.pageNow\n            pageSize = pageSize ?? propsTableInfo.pageSize\n            searchKey = searchKey ?? propsTableInfo.searchKey\n            moreProps = moreProps ?? propsTableInfo.moreProps\n        }\n        let pn = pageNow ?? PageNow\n        let ps = pageSize ?? PageSize\n        let sk = searchKey ?? searchText\n        let fmp = moreProps ?? form.getFieldsValue()\n        setPageNow(pn)\n        setPageSize(ps)\n        setSearchText(sk)\n        setLoading(true)\n        props.API({\n            pageNow: pn,\n            pageSize: ps,\n            searchKey: sk,\n            ...fmp\n        }).then((data: any) => {\n            // console.log(\"data\", data)\n            if (data.rows === null) data.rows = []\n            if (props.APIRowsTransForm !== undefined) {\n                setTableData(props.APIRowsTransForm(data.rows))\n            } else setTableData(data.rows)\n            if (data.totalNum !== undefined && data.totalNum !== \"0\") {\n                setTotal(data.totalNum)\n                props.name && props.setTableInfo(props.name, {\n                    total: data.totalNum,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            } else {\n                setTotal(ps * data.totalPage);\n                props.name && props.setTableInfo(props.name, {\n                    total: ps * data.totalPage,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            }\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        form.setFieldsValue(props.initRequestProps)\n        getInfo()\n    }, [props.name])\n\n    // 带有表单的筛选\n    const [form] = useForm()\n    const onFinish = () => {\n        const values = form.getFieldsValue()\n        if (JSON.stringify(values) !== \"{}\")\n            getInfo(1, PageSize, undefined, values)\n    };\n    const onReset = () => {\n        const values = form.getFieldsValue()\n        form.resetFields();\n        const tf = props.tableData[props.name]?.tableInfo\n        props.name && props.setTableInfo(props.name, {\n            total: tf.total,\n            pageNow: tf.pageNow,\n            pageSize: tf.pageSize,\n            searchKey: tf.searchKey,\n            moreProps: undefined\n        })\n        const valuesAfter = form.getFieldsValue()\n        // 重置前后若发生改变，则重新加载表格\n        if (JSON.stringify(values) !== JSON.stringify(valuesAfter))\n            getInfo(1, PageSize, undefined, undefined)\n\n    };\n\n\n    useEffect(() => {\n        // 监听表格的版本变化，当版本变更时更新表格\n        const propsTableVersion = props.tableData[props.name]?.tableVersion\n        if (propsTableVersion !== undefined && tableVersion !== propsTableVersion) {\n            // 如果数据被外部应用更新，则用 redux 中的数据更新当前行\n            if (propsTableVersion < 0) {\n                setTableVersion(-propsTableVersion)\n                setTableDataX(props.tableData[props.name]?.dataSource)\n            } else {\n                // 否则，重新进行请求\n                setTableVersion(propsTableVersion)\n                const values = form.getFieldsValue()\n                getInfo(PageNow, PageSize, searchText, values)\n            }\n        }\n    }, [props.tableData, tableVersion])\n\n    return (\n        <>\n            {props.useList && (\n                <Card\n                    title={props.title}\n                    bordered={true}\n                    size={\"default\"}\n                    className={props.cardProps ?? \"zeroBodyPaddingLeft\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={props.t(\"searchUser\")}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            const values = form.getFieldsValue()\n                                            getInfo(1, PageSize, text, values)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        {props.useFormBtn && (\n                                            <Space style={{marginLeft: \"30px\"}} size={20}>\n                                                <Button type=\"primary\" onClick={onFinish}>\n                                                    筛选\n                                                </Button>\n                                                <Button htmlType=\"button\" onClick={onReset}>\n                                                    重置\n                                                </Button>\n                                            </Space>\n                                        )}\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <List\n                        grid={props.grid}\n                        itemLayout={\"vertical\"}\n                        loading={loading}\n                        size={props.size}\n                        dataSource={tableData}\n                        renderItem={props.renderItem}\n                        pagination={{\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            size: \"small\",\n                            hideOnSinglePage: true,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n            {!props.useList && (\n                <Card\n                    bordered={false}\n                    size={\"small\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={\"搜索\"}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            getInfo(1, PageSize, text)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        <Space style={{marginLeft: \"30px\"}} size={20}>\n                                            <Button type=\"primary\" onClick={onFinish}>\n                                                {props.t(\"filtering\")}\n                                            </Button>\n                                            <Button htmlType=\"button\" onClick={onReset}>\n                                                {props.t(\"Reset\")}\n                                            </Button>\n                                        </Space>\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <Table\n                        rowKey={props.rowKey}\n                        loading={loading}\n                        size={props.size}\n                        columns={props.columns}\n                        rowSelection={props.rowSelection}\n                        dataSource={tableData}\n                        pagination={props.pagination ?? {\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            hideOnSinglePage: false,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n        </>\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    const UState: UserState = state.UserReducer\n    const TState: TableState = state.TableReduce\n    return {\n        roles: UState.userInfo?.roles,\n        tableData: {...TState.tableData}\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setTableInfo: (name: string, data: any) => dispatch({\n        type: \"setTableInfo\",\n        name: name,\n        data: data\n    }),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: false})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(TableWithPagination)\n))\n\n"],"sourceRoot":""}