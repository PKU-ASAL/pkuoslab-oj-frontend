{"version":3,"sources":["Component/user/Form/Item/ItemCaptcha.tsx","Component/user/Form/Item/ItemEmail.tsx","Component/user/Form/Item/ItemUsername.tsx","Utils/getUrlParams.ts","Component/user/ThirdPartyLoginSDUCAS.tsx","Component/user/Form/ForgetPass.tsx","Component/user/Login.tsx","Pages/Client/CLogin.tsx"],"names":["withTranslation","props","image","setImage","useState","getCaptcha","CApi","then","data","captcha","setImgId","captchaId","useEffect","content","span","onChange","e","undefined","setCaptcha","target","value","offset","src","height","icon","onClick","map","Item","name","label","t","rules","required","canSend","setCanSend","modalVis","setModalVis","imgId","email","setEmail","intervalId","setInterval","clearInterval","needVerify","notCheck","type","message","editable","hasFeedback","disabled","bordered","title","visible","maskClosable","destroyOnClose","onOk","sendVerificationEmail","event","emailVerifyType","res","success","onCancel","emailTitle","getFieldValue","validator","_","test","checkExist","Promise","resolve","isExist","reject","catch","onPressEnter","addonAfter","getEmail","error","notRequired","ExistCheck","username","getUrlParams","url","obj","index","indexOf","params","substr","parr","split","i","arr","server","apiAddress","FRONT_SERVER","ThirdPartyLoginSDUCAS","Component","render","href","UrlPrefix","danger","this","ck","active","setActive","ModalForm","trigger","button","autoFocusFirstInput","modalProps","width","okText","onFinish","async","values","forgetPassword","activeKey","TabPane","tab","ItemUsername","ItemEmail","ItemCaptcha","connect","state","dispatch","withRouter","formRef","useRef","loginType","setLoginType","useDispatch","afterLogin","passwordLogin","current","validateFields","login","resData","emailLogin","style","textAlign","margin","LoginForm","subTitle","actions","submitter","resetButtonProps","prop","def","block","fieldProps","size","prefix","UserOutlined","className","placeholder","Password","LockOutlined","marginBottom","isLogin","useSelector","UserReducer","to","location","search","history","replace","homeURL","routerC_M"],"mappings":"kGAAA,oGAmEeA,mBA7DMC,IAEjB,MAAOC,EAAOC,GAAYC,qBAEpBC,EAAa,KACfC,IAAKD,aAAaE,MAAMC,IACpBL,EAASK,EAAKC,SACdR,EAAMS,SAASF,EAAKG,eAI5BC,qBAAU,KACNP,MACD,IAEH,MAAMQ,EACF,eAAC,IAAD,WACI,cAAC,IAAD,CAAKC,KAAM,GAAX,SACI,cAAC,IAAD,CAAOC,SAAWC,SACWC,IAArBhB,EAAMiB,YACNjB,EAAMiB,WAAWF,EAAEG,OAAOC,YAGtC,cAAC,IAAD,CAAKC,OAAQ,EAAGP,KAAM,EAAtB,SACI,cAAC,IAAD,CAAOQ,IAAKpB,EAAOqB,OAAQ,OAE/B,cAAC,IAAD,CAAKT,KAAM,EAAX,SACI,cAAC,IAAD,CACIU,KAAM,cAAC,IAAD,IACNC,QAAS,KACLpB,YAMpB,OACI,mCAEQ,CAAC,IAAIqB,KAAI,SACoBT,IAArBhB,EAAMiB,WACCL,EAGH,cAAC,IAAKc,KAAN,CACIC,KAAK,UACLC,MAAO5B,EAAM6B,EAAE,WACfC,MAAO,CACH,CAACC,UAAU,IAJnB,SAOKnB,Y,kCCzDjC,0FAmIeb,mBAlHIC,IAAiC,IAAD,EAC/C,MAAOgC,EAASC,GAAc9B,mBAAiB,IACxC+B,EAAUC,GAAehC,oBAAkB,IAC3CiC,EAAO3B,GAAYN,mBAAiB,KACpCK,EAASS,GAAcd,mBAAiB,KACxCkC,EAAOC,GAAYnC,mBAAiB,IAa3C,OALAQ,qBAAU,KACN,IAAI4B,EAAaC,aAAY,KANzBR,EAAU,GACVC,EAAWD,EAAU,KAKoB,KAC7C,MAAO,IAAMS,cAAcF,MAI3B,sCAC0B,IAArBvC,EAAM0C,YACH,cAAC,IAAKhB,KAAN,CAAWC,KAAK,QAAQC,MAAO5B,EAAM6B,EAAE,SAC5BC,OAA0B,IAAnB9B,EAAM2C,SAAoB,CAC7B,CAACC,KAAM,QAASC,QAAS7C,EAAM6B,EAAE,eACjC,CAACE,UAA6B,IAAnB/B,EAAM8C,gBACjB9B,EACJ+B,aAAW,EALtB,SAMI,cAAC,IAAD,CACIC,UAA6B,IAAnBhD,EAAM8C,SAChBG,UAA6B,IAAnBjD,EAAM8C,cAIN,IAArB9C,EAAM0C,YACH,qCACI,cAAC,IAAD,CACIQ,MAAO,uCACPC,QAASjB,EACTkB,cAAc,EACdC,gBAAgB,EAChBC,KAAM,KACFjD,IAAKkD,sBAAsB,CACvBlB,MAAOA,EACP7B,QAASA,EACTE,UAAW0B,EACXoB,MAAOxD,EAAMyD,kBACdnD,MAAMoD,IACLb,IAAQc,QAAQ,sEAChB1B,EAAW,IACXE,GAAY,OAGpByB,SAAU,KACNzB,GAAY,IAlBpB,SAqBI,cAAC,IAAD,CACI1B,SAAUA,EACVQ,WAAYA,MAGpB,cAAC,IAAKS,KAAN,CACIC,KAAK,QACLC,MAAK,UAAE5B,EAAM6D,kBAAR,QAAsB7D,EAAM6B,EAAE,aACnCC,MAAO,CACH,CAACC,UAAU,GACX,QAAC,cAAC+B,GAAF,QAAsB,CAClBC,UAAS,CAACC,EAAG7C,IACU,6BACH8C,KAAK9C,IAGI,IAArBnB,EAAMkE,WAA6BC,QAAQC,UACxC/D,IAAKgE,QAAQ,CAAChC,MAAOlB,IAAQb,MAAMC,IACzB,IAATA,EAAuB4D,QAAQC,WACjB,IAAT7D,EAAsB4D,QAAQG,OAAOtE,EAAM6B,EAAE,mCAC/CsC,QAAQG,OAAOtE,EAAM6B,EAAE,+BAC/B0C,OAAOxD,GACCoD,QAAQG,OAAOvD,KARfoD,QAAQG,OAAOtE,EAAM6B,EAAE,kBATlD,SAsBI,cAAC,IAAD,CACImB,UAA6B,IAAnBhD,EAAM8C,UAAsBd,EAAU,EAChDiB,UAA6B,IAAnBjD,EAAM8C,SAChB0B,aAAcxE,EAAMwE,aACpBC,WACI,cAAC,IAAD,CACI7B,KAAM,OACNI,SAAsB,IAAZhB,EACVR,QAAS,KACLxB,EAAM0E,WAAWpE,MAAMC,IACnB+B,EAAS/B,GACT4B,GAAY,MACboC,OAAM,KACL1B,IAAQ8B,MAAM,sCAR1B,SAYkB,IAAZ3C,EAAgBA,EAAU,IAAMhC,EAAM6B,EAAE,gBAI1D,cAAC,IAAKH,KAAN,CAAWC,KAAK,YAAYC,MAAO5B,EAAM6B,EAAE,aAChCC,MAAO,CAAC,CAACC,UAAU,IAD9B,SAEI,cAAC,IAAD,CAAOyC,aAAcxE,EAAMwE,2B,kCC3HnD,sDA0CezE,mBArCOC,GAEd,cAAC,IAAK0B,KAAN,CACIC,KAAK,WACLC,MAAO5B,EAAM6B,EAAE,YACfC,MACI,CACI,CACIC,UACuB,IAAnB/B,EAAM8C,WAA4C,IAAtB9C,EAAM4E,YACtC/B,QAAS7C,EAAM6B,EAAE,kBAErB,QAAC,cAACiC,GAAF,QAAsB,CAClBC,UAAS,CAACC,EAAG7C,KACgB,IAArBnB,EAAM6E,WACCxE,IAAKgE,QAAQ,CAACS,SAAU3D,IAAQb,MAAMC,IAC5B,IAATA,EAAuB4D,QAAQC,WACjB,IAAT7D,EAAsB4D,QAAQG,OAAO,wCACvCH,QAAQG,OAAO,8BACvBC,OAAOxD,GACCoD,QAAQG,OAAOvD,KAGvBoD,QAAQC,aAK/BrB,aAAW,EA1Bf,SA2BI,cAAC,IAAD,CACIC,UAA6B,IAAnBhD,EAAM8C,SAChBG,SAAUjD,EAAM8C,gB,kCCpCzB,SAASiC,EAAaC,GACzB,IAAIC,EAAW,GACXC,EAAQF,EAAIG,QAAQ,KACpBC,EAASJ,EAAIK,OAAOH,EAAQ,GAEhC,IAAe,IAAXA,EAAc,CACd,IAAII,EAAOF,EAAOG,MAAM,KACxB,IAAK,IAAIC,KAAKF,EAAM,CAChB,IAAIG,EAAMD,EAAED,MAAM,KAClBN,EAAIQ,EAAI,IAAMA,EAAI,IAG1B,OAAOR,EAZX,mC,wLCOA,MAAMS,EAASC,cAAaC,aAE5B,MAAMC,UAA8BC,YAChCC,SACI,OACI,mCACI,mBAAGC,KACC,6CACAN,EAASO,IAAY,qCAFzB,SAGI,cAAC,IAAD,CAAQC,QAAM,EAACtD,KAAM,UAArB,SACKuD,KAAKnG,MAAM6B,EAAEuE,YAAGD,KAAKnG,MAAMkD,MAAO,mBAQ5CnD,oBAAkB8F,G,0DC8BlB9F,qBA9CKC,IAEhB,MAAOoC,EAAO3B,GAAYN,sBACnBkG,EAAQC,GAAanG,mBAAiB,KAE7C,OACI,eAACoG,EAAA,EAAD,CACIrD,MAAM,2BACNsD,QACIxG,EAAMyG,OAEVC,qBAAmB,EACnBC,WAAY,CACRvD,cAAc,EACdC,gBAAgB,EAChBuD,MAAO,IACPC,OAAQ,gBAEZC,SAAUC,UACN,IAAIxG,EAAY,CACZG,UAAW0B,EACX5B,QAASwG,EAAOxG,SAIpB,MAFe,MAAX6F,IAAgB9F,EAAKuE,SAAWkC,EAAOlC,UAC5B,MAAXuB,IAAgB9F,EAAK8B,MAAQ2E,EAAO3E,OACjChC,IAAK4G,eAAe1G,GAAMD,MAAK,KAClCuC,IAAQc,QAAQ,+FACT,MArBnB,UAyBI,eAAC,IAAD,CACI7C,SAAUwF,EACVY,UAAWb,EAFf,UAGI,cAAC,IAAKc,QAAN,CAAcC,IAAI,qBAAlB,SACI,cAACC,EAAA,EAAD,CAAczC,YAAwB,MAAXyB,KADH,KAG5B,cAAC,IAAKc,QAAN,CAAcC,IAAI,eAAlB,SACI,cAACE,EAAA,EAAD,CAAW5E,YAAY,EAAOC,SAAqB,MAAX0D,KADjB,QAI/B,cAACkB,EAAA,EAAD,CAAa9G,SAAUA,UCmFpB+G,mBANUC,IACd,MAGiBC,IAAD,KAEZF,CAIXzH,cACI4H,aAzHO3H,IAEX,MAAM4H,EAAUC,oBACTC,EAAWC,GAAgB5H,mBAAoB,YAChD,EAAC0B,GAAK7B,EACN0H,EAAWM,cACXC,EAAc1H,IAChBmH,EAAS,CAAC9E,KAAM,cAChB8E,EAAS,CAAC9E,KAAM,cAAerC,KAAMA,KAEnC2H,EAAgB,KAAO,IAAD,EACxB,UAAAN,EAAQO,eAAR,SAAiBC,eAAe,CAAC,WAAY,aAAa9H,MAAMa,IAC5Dd,IAAKgI,MAAMlH,GAAOb,MAAMgI,IACpBL,EAAWK,UAIjBC,EAAa,KAAO,IAAD,EACrB,UAAAX,EAAQO,eAAR,SAAiBC,eAAe,CAAC,QAAS,cAAc9H,MAAMa,IAC1Dd,IAAKkI,WAAWpH,GAAOb,MAAMgI,IACzBL,EAAWK,UAKvB,OACI,cAAC,IAAD,CACIE,MAAO,CAAC5B,MAAO,QAAS6B,UAAW,SAAUC,OAAQ,UADzD,SAEI,eAACC,EAAA,EAAD,CACIf,QAASA,EAET1E,MAAOrB,EAAE,4BACT+G,SAAU,GACVC,QACI,6BAEJC,UAAW,CACPC,kBAAkB,EAClBhD,OAAQ,CAACiD,EAAMC,IACO,YAAdnB,GAAyC,UAAdA,EACpB,eAAC,IAAD,CAAQlF,KAAM,UAAWsG,OAAK,EAAC1H,QAAS,KAC7B,YAAdsG,EAA0BI,IAAkBK,KADzC,cAEFvI,EAAM6B,EAAE,SAFN,OAIA,cAAC,EAAD,KAhBvB,UAqBI,cAAC,IAAD,CAAMqF,UAAWY,EAAWhH,SAAWoG,GAAca,EAAab,GAAlE,SACI,cAAC,IAAKC,QAAN,CAA8BC,IAAKvF,EAAE,6BAAlB,aAMR,YAAdiG,GACG,qCACI,cAAC,IAAD,CACInG,KAAK,WACLwH,WAAY,CACRC,KAAM,QACNC,OAAQ,cAACC,EAAA,EAAD,CAAcC,UAAW,eACjC/E,aAAc,IAAM0D,KAExBsB,YAAa3H,EAAE,wCACfC,MAAO,CAAC,CAACC,UAAU,EAAMc,QAAShB,EAAE,6CAGxC,cAAC,IAAY4H,SAAb,CACI9H,KAAK,WACLwH,WAAY,CACRC,KAAM,QACNC,OAAQ,cAACK,EAAA,EAAD,CAAcH,UAAW,eACjC/E,aAAc,IAAM0D,KAExBsB,YAAa3H,EAAE,kCACfC,MAAO,CAAC,CAACC,UAAU,EAAMc,QAAShB,EAAE,+CAIjC,UAAdiG,GACG,mCACI,cAACR,EAAA,EAAD,CACI7D,gBAAiB,QAASf,YAAY,EAAMwB,YAAY,EAAOL,WAAYhC,EAAE,gBAC7E2C,aAAc,KACV+D,KAEJ7D,SAAU,KAAO,IAAD,EACZ,iBAAOkD,EAAQO,eAAf,aAAO,EAAiBC,eAAe,CAAC,UAAU9H,MAAMC,GAC7C4D,QAAQC,QAAQ7D,EAAK8B,SAC7BkC,OAAM,IAAMJ,QAAQG,gBAIxB,WAAdwD,GACG,qBAAKU,MAAO,CACRC,UAAW,QAASkB,aAAc,IADtC,SAGI,cAAC,IAAD,CAAOP,KAAM,EAAb,SAEI,cAAC,EAAD,CAAY3C,OAAQ,cAAC,IAAD,CAAQ7D,KAAM,OAAQwG,KAAM,QAA5B,SAAsCvH,EAAE,8C,oBCrFzE9B,wBAAkB4H,aAtBjB3H,IAEZ,MAAM4J,EAAUC,aAAapC,GAAeA,EAAMqC,YAAYF,UAa9D,OAXAjJ,qBAAU,KACN,IAAgB,IAAZiJ,EAAkB,CAClB,IAAIG,EAAKhF,YAAa/E,EAAMgK,SAASC,QAAQF,QAClC/I,IAAP+I,EAAkB/J,EAAMkK,QAAQC,QAAQC,YAAQC,OAEhDrK,EAAMkK,QAAQC,QAAQJ,GACtBlH,IAAQc,QAAQ3D,EAAM6B,EAAE,0BAGjC,CAAC+H,IAGA,mCACI,cAAC,EAAD","file":"static/js/22.95f6e5d2.chunk.js","sourcesContent":["import {Button, Col, Form, Image, Input, Row} from \"antd\";\nimport React, {useEffect, useState} from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport CApi from \"Utils/API/c-api\"\nimport {RedoOutlined} from \"@ant-design/icons\"\n\nconst ItemCaptcha = (props: any) => {\n\n    const [image, setImage] = useState<string>()\n\n    const getCaptcha = () => {\n        CApi.getCaptcha().then((data: any) => {\n            setImage(data.captcha)\n            props.setImgId(data.captchaId)\n        })\n    }\n\n    useEffect(() => {\n        getCaptcha()\n    }, [])\n\n    const content = (\n        <Row>\n            <Col span={14}>\n                <Input onChange={(e) => {\n                    if (props.setCaptcha !== undefined)\n                        props.setCaptcha(e.target.value)\n                }}/>\n            </Col>\n            <Col offset={1} span={8}>\n                <Image src={image} height={32}/>\n            </Col>\n            <Col span={1}>\n                <Button\n                    icon={<RedoOutlined/>}\n                    onClick={() => {\n                        getCaptcha()\n                    }}/>\n            </Col>\n        </Row>\n    )\n\n    return (\n        <>\n            {\n                [''].map(() => {\n                    if (props.setCaptcha !== undefined) {\n                        return content\n                    } else {\n                        return (\n                            <Form.Item\n                                name=\"captcha\"\n                                label={props.t(\"captcha\")}\n                                rules={[\n                                    {required: true},\n                                ]}\n                            >\n                                {content}\n                            </Form.Item>\n                        )\n                    }\n                })\n            }\n        </>\n    )\n}\n\nexport default withTranslation()(ItemCaptcha)\n","import {Button, Form, Input, message, Modal} from \"antd\";\nimport React, {useEffect, useState} from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport CApi from \"Utils/API/c-api\"\nimport ItemCaptcha from \"./ItemCaptcha\";\nimport {emailType} from \"../../../../Type/types\";\n\nexport interface ItemEmailProps {\n    needVerify: boolean\n    editable: boolean\n    getEmail: any\n    emailVerifyType: emailType  // 邮箱验证类型\n    checkExist?: boolean        // 是否检查邮箱是否存在\n    emailTitle?: string         // 标题\n    onPressEnter?: any\n}\n\nconst ItemEmail = (props: ItemEmailProps & any) => {\n    const [canSend, setCanSend] = useState<number>(0);\n    const [modalVis, setModalVis] = useState<boolean>(false);\n    const [imgId, setImgId] = useState<string>(\"\")\n    const [captcha, setCaptcha] = useState<string>(\"\")\n    const [email, setEmail] = useState<string>(\"\")\n\n    const reduce = () => {\n        if (canSend > 0) {\n            setCanSend(canSend - 1)\n        }\n    }\n\n    useEffect(() => {\n        let intervalId = setInterval(() => reduce(), 1000)\n        return () => clearInterval(intervalId)\n    })\n\n    return (\n        <>\n            {props.needVerify === false && (\n                <Form.Item name=\"email\" label={props.t(\"email\")}\n                           rules={props.notCheck !== true ? [\n                               {type: 'email', message: props.t('emailError')},\n                               {required: props.editable !== false}\n                           ] : undefined}\n                           hasFeedback>\n                    <Input\n                        disabled={props.editable === false}\n                        bordered={props.editable !== false}\n                    />\n                </Form.Item>\n            )}\n            {props.needVerify === true && (\n                <>\n                    <Modal\n                        title={\"人机身份认证\"}\n                        visible={modalVis}\n                        maskClosable={false}\n                        destroyOnClose={true}\n                        onOk={() => {\n                            CApi.sendVerificationEmail({\n                                email: email,\n                                captcha: captcha,\n                                captchaId: imgId,\n                                event: props.emailVerifyType\n                            }).then((res) => {\n                                message.success(\"验证码已发送至您的邮箱\")\n                                setCanSend(60);\n                                setModalVis(false)\n                            })\n                        }}\n                        onCancel={() => {\n                            setModalVis(false)\n                        }}\n                    >\n                        <ItemCaptcha\n                            setImgId={setImgId}\n                            setCaptcha={setCaptcha}\n                        />\n                    </Modal>\n                    <Form.Item\n                        name=\"email\"\n                        label={props.emailTitle ?? props.t(\"new email\")}\n                        rules={[\n                            {required: true},\n                            ({getFieldValue}) => ({\n                                validator(_, value) {\n                                    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                                    if (!emailRegex.test(value)) {\n                                        return Promise.reject(props.t('emailError'));\n                                    }\n                                    if (props.checkExist === false) return Promise.resolve()\n                                    return CApi.isExist({email: value}).then((data: any) => {\n                                        if (data === false) return Promise.resolve()\n                                        else if (data === true) return Promise.reject(props.t(\"邮箱已存在\"))\n                                        return Promise.reject(props.t(\"检验失败\"))\n                                    }).catch((e: any) => {\n                                        return Promise.reject(e)\n                                    })\n                                },\n                            }),\n                        ]}>\n                        <Input\n                            disabled={props.editable === false || canSend > 0}\n                            bordered={props.editable !== false}\n                            onPressEnter={props.onPressEnter}\n                            addonAfter={\n                                <Button\n                                    type={\"text\"}\n                                    disabled={canSend !== 0}\n                                    onClick={() => {\n                                        props.getEmail().then((data: string) => {\n                                            setEmail(data)\n                                            setModalVis(true)\n                                        }).catch(() => {\n                                            message.error(\"邮箱不合法\")\n                                        })\n                                    }}\n                                >\n                                    {(canSend !== 0 ? canSend + \"s\" : props.t(\"Verify\"))}\n                                </Button>\n                            }/>\n                    </Form.Item>\n                    <Form.Item name=\"emailCode\" label={props.t(\"emailCode\")}\n                               rules={[{required: true}]}>\n                        <Input onPressEnter={props.onPressEnter}/>\n                    </Form.Item>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default withTranslation()(ItemEmail)\n","import {Form, Input} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport CApi from \"../../../../Utils/API/c-api\";\n\nconst ItemUsername = (props: any) => {\n    return (\n        <Form.Item\n            name=\"username\"\n            label={props.t(\"username\")}\n            rules={\n                [\n                    {\n                        required:\n                            props.editable !== false && props.notRequired !== true,\n                        message: props.t(\"usernameEmpty\")\n                    },\n                    ({getFieldValue}) => ({\n                        validator(_, value) {\n                            if (props.ExistCheck === true) {\n                                return CApi.isExist({username: value}).then((data: any) => {\n                                    if (data === false) return Promise.resolve()\n                                    else if (data === true) return Promise.reject(\"用户名已存在\")\n                                    return Promise.reject(\"检验失败\")\n                                }).catch((e: any) => {\n                                    return Promise.reject(e)\n                                })\n                            }\n                            return Promise.resolve()\n                        },\n                    }),\n                ]\n            }\n            hasFeedback>\n            <Input\n                disabled={props.editable === false}\n                bordered={props.editable}\n            />\n        </Form.Item>\n    )\n}\n\nexport default withTranslation()(ItemUsername)","export function getUrlParams(url: string) {\n    let obj: any = {},\n        index = url.indexOf('?'), // 看url有没有参数\n        params = url.substr(index + 1); // 截取url参数部分 id = 1 & type = 2\n\n    if (index !== -1) { // 有参数时\n        let parr = params.split('&');  // 将参数分割成数组 [\"id = 1 \", \" type = 2\"]\n        for (let i of parr) {           // 遍历数组\n            let arr = i.split('=');  // 1） i id = 1   arr = [id, 1]  2）i type = 2  arr = [type, 2]\n            obj[arr[0]] = arr[1];  // obj[arr[0]] = id, obj.id = 1   obj[arr[0]] = type, obj.type = 2\n        }\n    }\n    return obj\n}","import React, {Component} from \"react\";\nimport {Button} from \"antd\";\nimport {withTranslation} from \"react-i18next\";\nimport apiAddress from \"../../Utils/API/apiAddress\";\nimport {ck} from \"../../Utils/empty\";\nimport {UrlPrefix} from \"../../Config/constValue\";\n\nconst server = apiAddress().FRONT_SERVER\n\nclass ThirdPartyLoginSDUCAS extends Component<any, any> {\n    render() {\n        return (\n            <>\n                <a href={\n                    \"https://pass.sdu.edu.cn/cas/login?service=\" +\n                    server + UrlPrefix + \"/thirdPartyLogin?thirdParty=SDUCAS\"}>\n                    <Button danger type={\"primary\"}>\n                        {this.props.t(ck(this.props.title, \"SDUAuth\"))}\n                    </Button>\n                </a>\n            </>\n        )\n    }\n}\n\nexport default withTranslation()(ThirdPartyLoginSDUCAS)","import {ModalForm} from \"@ant-design/pro-form\";\nimport {message, Tabs} from \"antd\";\nimport ItemCaptcha from \"./Item/ItemCaptcha\";\nimport React, {useState} from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport ItemUsername from \"./Item/ItemUsername\";\nimport ItemEmail from \"./Item/ItemEmail\";\nimport CApi from \"Utils/API/c-api\"\n\nconst ForgetPass = (props: any) => {\n\n    const [imgId, setImgId] = useState<string>()\n    const [active, setActive] = useState<string>(\"1\")\n\n    return (\n        <ModalForm<any>\n            title=\"找回密码\"\n            trigger={\n                props.button\n            }\n            autoFocusFirstInput\n            modalProps={{\n                maskClosable: false,\n                destroyOnClose: true,\n                width: 500,\n                okText: \"发送\"\n            }}\n            onFinish={async (values) => {\n                let data: any = {\n                    captchaId: imgId,\n                    captcha: values.captcha\n                }\n                if (active === \"1\") data.username = values.username\n                if (active === \"2\") data.email = values.email\n                return CApi.forgetPassword(data).then(()=>{\n                    message.success('修改密码的链接已发送至您的邮箱');\n                    return true\n                })\n            }}\n        >\n            <Tabs\n                onChange={setActive}\n                activeKey={active}>\n                <Tabs.TabPane tab=\"用户名\" key=\"1\">\n                    <ItemUsername notRequired={active !== \"1\"}/>\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"邮箱\" key=\"2\">\n                    <ItemEmail needVerify={false} notCheck={active !== \"2\"}/>\n                </Tabs.TabPane>\n            </Tabs>\n            <ItemCaptcha setImgId={setImgId}/>\n        </ModalForm>\n    )\n}\n\nexport default withTranslation()(ForgetPass)","import React, {Dispatch, useRef, useState} from \"react\";\nimport {Button, Card, Space, Tabs} from \"antd\";\nimport {LoginForm, ProFormInstance, ProFormText} from \"@ant-design/pro-form\";\nimport {LockOutlined, UserOutlined,} from '@ant-design/icons';\nimport ThirdPartyLoginSDUCAS from \"./ThirdPartyLoginSDUCAS\";\nimport {withTranslation} from \"react-i18next\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {loginInfo} from \"../../Type/types\";\nimport Logo from \"Assert/img/pku-logo.png\"\nimport ForgetPass from \"./Form/ForgetPass\";\nimport ItemEmail from \"./Form/Item/ItemEmail\";\nimport CApi from \"../../Utils/API/c-api\";\n\ntype LoginType = 'SDUCAS' | 'account' | \"email\";\n\n\nconst Login = (props: any) => {\n\n    const formRef = useRef<ProFormInstance>()\n    const [loginType, setLoginType] = useState<LoginType>(\"account\") // HRZ: 默认使用用户名密码登录，禁用邮箱认证和SDUCAS\n    const {t} = props\n    const dispatch = useDispatch()\n    const afterLogin = (data: loginInfo) => {\n        dispatch({type: \"userLogin\"})\n        dispatch({type: \"setUserInfo\", data: data})\n    }\n    const passwordLogin = () => {\n        formRef.current?.validateFields([\"username\", \"password\"]).then((value) => {\n            CApi.login(value).then((resData: any) => {\n                afterLogin(resData)\n            })\n        })\n    }\n    const emailLogin = () => {\n        formRef.current?.validateFields([\"email\", \"emailCode\"]).then((value) => {\n            CApi.emailLogin(value).then((resData: any) => {\n                afterLogin(resData)\n            })\n        })\n    }\n\n    return (\n        <Card\n            style={{width: \"500px\", textAlign: \"center\", margin: \"0 auto\"}}>\n            <LoginForm\n                formRef={formRef}\n                /*logo = {Logo} HRZ: 删除logo*/\n                title={t(\"用户登录\")}\n                subTitle={\"\"/*HRZ:删除登录框上的提示符*/}\n                actions={\n                    <></>\n                }\n                submitter={{\n                    resetButtonProps: false,\n                    render: (prop, def) => {\n                        if (loginType === 'account' || loginType === 'email') {\n                            return <Button type={\"primary\"} block onClick={() => {\n                                loginType === 'account' ? passwordLogin() : emailLogin()\n                            }}> {props.t(\"Login\")} </Button>\n                        } else {\n                            return <ThirdPartyLoginSDUCAS/>\n                        }\n                    },\n                }}\n            >\n                <Tabs activeKey={loginType} onChange={(activeKey) => setLoginType(activeKey as LoginType)}>\n                    <Tabs.TabPane key={'account'} tab={t('账号密码')}/>\n                    {/*HRZ:禁用邮箱登录*/}\n                    {/*<Tabs.TabPane key={'email'} tab={t('邮箱验证码')}/>*/}\n                    {/*HRZ:禁用SDUCAS登录*/}\n                    {/*<Tabs.TabPane key={'SDUCAS'} tab={t('统一身份认证')}/>*/}\n                </Tabs>\n                {loginType === 'account' && (\n                    <>\n                        <ProFormText\n                            name=\"username\"\n                            fieldProps={{\n                                size: 'large',\n                                prefix: <UserOutlined className={'prefixIcon'}/>,\n                                onPressEnter: () => passwordLogin()\n                            }}\n                            placeholder={t('请输入用户名')}\n                            rules={[{required: true, message: t('请输入用户名!'),},]}\n\n                        />\n                        <ProFormText.Password\n                            name=\"password\"\n                            fieldProps={{\n                                size: 'large',\n                                prefix: <LockOutlined className={'prefixIcon'}/>,\n                                onPressEnter: () => passwordLogin()\n                            }}\n                            placeholder={t('请输入密码')}\n                            rules={[{required: true, message: t('请输入密码！'),},]}\n                        />\n                    </>\n                )}\n                {loginType === 'email' && (\n                    <>\n                        <ItemEmail\n                            emailVerifyType={\"login\"} needVerify={true} checkExist={false} emailTitle={t(\"邮箱\")}\n                            onPressEnter={() => {\n                                emailLogin()\n                            }}\n                            getEmail={() => {\n                                return formRef.current?.validateFields([\"email\"]).then((data: any) => {\n                                    return Promise.resolve(data.email)\n                                }).catch(() => Promise.reject())\n                            }}/>\n                    </>\n                )}\n                {loginType !== 'SDUCAS' && (\n                    <div style={{\n                        textAlign: \"right\", marginBottom: 10\n                    }}>\n                        <Space size={3}>\n                            {/*<Register button={<Button type={\"link\"} size={\"small\"}>注册</Button>}/>*/}\n                            <ForgetPass button={<Button type={\"link\"} size={\"small\"}>{t(\"忘记密码\")}</Button>}/>\n                        </Space>\n                    </div>\n                )}\n            </LoginForm>\n        </Card>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {}\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    withTranslation()(\n        withRouter(Login)\n    ))\n","import React, {useEffect} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport Login from \"../../Component/user/Login\";\nimport {getUrlParams} from \"../../Utils/getUrlParams\";\nimport {UrlPrefix} from \"../../Config/constValue\";\nimport {message} from \"antd\";\nimport {homeURL, routerC_M} from \"../../Config/router/routerC\";\n\n\nconst CLogin = (props: any) => {\n\n    const isLogin = useSelector((state: any) => state.UserReducer.isLogin)\n\n    useEffect(() => {\n        if (isLogin === true) {\n            let to = getUrlParams(props.location.search).to\n            if (to === undefined) props.history.replace(homeURL(routerC_M))\n            else {\n                props.history.replace(to)\n                message.success(props.t(\"loginSuccessfully\"))\n            }\n        }\n    }, [isLogin])\n\n    return (\n        <>\n            <Login/>\n        </>\n    )\n}\n\nexport default withTranslation()(withRouter(CLogin))\n"],"sourceRoot":""}