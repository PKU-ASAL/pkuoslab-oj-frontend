{"version":3,"sources":["Component/user/Form/Item/ItemPassword.tsx","Utils/getUrlParams.ts","Pages/Client/CResetPass.tsx"],"names":["withTranslation","props","firstPassProps","name","label","t","newpass","oldpass","Item","rules","required","message","hasFeedback","Password","undefined","noConfirm","dependencies","getFieldValue","validator","_","value","Promise","reject","resolve","getUrlParams","url","obj","index","indexOf","params","substr","parr","split","i","arr","withRouter","token","location","search","form","useForm","useTranslation","style","width","textAlign","margin","title","layout","type","block","onClick","validateFields","then","CApi","resetPassword","history","push","UrlPrefix","success"],"mappings":"kGAAA,6CA4CeA,mBAxCOC,IAClB,IAAIC,EAAiB,CAACC,KAAM,WAAYC,MAAOH,EAAMI,EAAE,aAGvD,OAFsB,IAAlBJ,EAAMK,UAAkBJ,EAAiB,CAACC,KAAM,cAAeC,MAAOH,EAAMI,EAAE,kBAC5D,IAAlBJ,EAAMM,UAAkBL,EAAiB,CAACC,KAAM,WAAYC,MAAOH,EAAMI,EAAE,iBAE3E,qCACI,cAAC,IAAKG,KAAN,IAAeN,EACJO,MAAO,CACH,CAACC,UAAU,EAAMC,QAASV,EAAMI,EAAE,mBAEtCO,aAAW,EAJtB,SAKI,cAAC,IAAMC,SAAP,WAGkBC,IAAlBb,EAAMM,UAA6C,IAApBN,EAAMc,WACjC,cAAC,IAAKP,KAAN,CACIL,KAAK,UACLC,MACIH,EAAMI,EAAE,WAAaJ,EAAMK,QAAU,MAAQ,IAAM,YAEvDU,aAAc,CAACd,EAAeC,MAC9BS,aAAW,EACXH,MAAO,CACH,CAACC,UAAU,EAAMC,QAASV,EAAMI,EAAE,yBAClC,QAAC,cAACY,GAAF,QAAsB,CAClBC,UAAS,CAACC,EAAGC,IACJA,GAASH,EAAcf,EAAeC,QAAUiB,EAE9CC,QAAQC,OAAOrB,EAAMI,EAAE,sBADnBgB,QAAQE,aAZnC,SAiBI,cAAC,IAAMV,SAAP,a,kCCpCjB,SAASW,EAAaC,GACzB,IAAIC,EAAW,GACXC,EAAQF,EAAIG,QAAQ,KACpBC,EAASJ,EAAIK,OAAOH,EAAQ,GAEhC,IAAe,IAAXA,EAAc,CACd,IAAII,EAAOF,EAAOG,MAAM,KACxB,IAAK,IAAIC,KAAKF,EAAM,CAChB,IAAIG,EAAMD,EAAED,MAAM,KAClBN,EAAIQ,EAAI,IAAMA,EAAI,IAG1B,OAAOR,EAZX,mC,kCCAA,qHAsDeS,uBA5CIlC,IAEf,MAAMmC,EAAQZ,YAAavB,EAAMoC,SAASC,QAAQF,OAC3CG,GAAQC,eACT,EAACnC,GAAKoC,cAEZ,OACI,mCACI,qBAAKC,MAAO,CAACC,MAAO,QAASC,UAAW,SAAUC,OAAQ,UAA1D,SACI,qBAAKH,MAAO,CAACE,UAAW,QAAxB,SACI,eAAC,IAAD,CACIE,MAAOzC,EAAE,iBADb,UAGI,cAAC,IAAD,CACI0C,OAAQ,WACRR,KAAMA,EAFV,SAII,cAAC,IAAD,MAEJ,cAAC,IAAD,CACIS,KAAM,UACNC,OAAO,EACPC,QAAS,KACLX,EAAKY,iBAAiBC,MAAMhC,IACxBiC,IAAKC,cAAc,IACZlC,EACHgB,MAAOA,IACRgB,MAAK,KACJnD,EAAMsD,QAAQC,KAAKC,IAAY,UAC/B9C,IAAQ+C,QAAQrD,EAAE,sDAVlC,SAeKA,EAAE","file":"static/js/23.7a9fdeb7.chunk.js","sourcesContent":["import {Form, Input} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\n\nconst ItemPassword = (props: any) => {\n    let firstPassProps = {name: \"password\", label: props.t(\"password\")}\n    if (props.newpass === true) firstPassProps = {name: \"newPassword\", label: props.t(\"NewPassword\")}\n    if (props.oldpass === true) firstPassProps = {name: \"password\", label: props.t(\"OldPassword\")}\n    return (\n        <>\n            <Form.Item {...firstPassProps}\n                       rules={[\n                           {required: true, message: props.t(\"passwordEmpty\")},\n                       ]}\n                       hasFeedback>\n                <Input.Password/>\n            </Form.Item>\n            {\n                props.oldpass === undefined && props.noConfirm !== true && (\n                    <Form.Item\n                        name=\"confirm\"\n                        label={\n                            props.t(\"confirm\" + (props.newpass ? \"New\" : \"\") + \"Password\")\n                        }\n                        dependencies={[firstPassProps.name]}\n                        hasFeedback\n                        rules={[\n                            {required: true, message: props.t(\"passwordEmptyConfirm\")},\n                            ({getFieldValue}) => ({\n                                validator(_, value) {\n                                    if (!value || getFieldValue(firstPassProps.name) === value)\n                                        return Promise.resolve();\n                                    return Promise.reject(props.t(\"passwordDifferent\"));\n                                },\n                            }),\n                        ]}>\n                        <Input.Password/>\n                    </Form.Item>\n                )\n            }\n        </>\n    )\n}\n\nexport default withTranslation()(ItemPassword)","export function getUrlParams(url: string) {\n    let obj: any = {},\n        index = url.indexOf('?'), // 看url有没有参数\n        params = url.substr(index + 1); // 截取url参数部分 id = 1 & type = 2\n\n    if (index !== -1) { // 有参数时\n        let parr = params.split('&');  // 将参数分割成数组 [\"id = 1 \", \" type = 2\"]\n        for (let i of parr) {           // 遍历数组\n            let arr = i.split('=');  // 1） i id = 1   arr = [id, 1]  2）i type = 2  arr = [type, 2]\n            obj[arr[0]] = arr[1];  // obj[arr[0]] = id, obj.id = 1   obj[arr[0]] = type, obj.type = 2\n        }\n    }\n    return obj\n}","import {Button, Card, Form, message} from \"antd\";\nimport ItemPassword from \"../../Component/user/Form/Item/ItemPassword\";\nimport {getUrlParams} from \"../../Utils/getUrlParams\";\nimport {withRouter} from \"react-router-dom\";\nimport {useForm} from \"antd/es/form/Form\";\nimport CApi from \"Utils/API/c-api\"\nimport {UrlPrefix} from \"../../Config/constValue\";\nimport {useTranslation} from \"react-i18next\";\n\n\nconst ResetPass = (props: any) => {\n\n    const token = getUrlParams(props.location.search).token\n    const [form] = useForm()\n    const {t} = useTranslation()\n\n    return (\n        <>\n            <div style={{width: \"500px\", textAlign: \"center\", margin: \"0 auto\"}}>\n                <div style={{textAlign: \"left\"}}>\n                    <Card\n                        title={t(\"resetPassword\")}\n                    >\n                        <Form\n                            layout={\"vertical\"}\n                            form={form}\n                        >\n                            <ItemPassword/>\n                        </Form>\n                        <Button\n                            type={\"primary\"}\n                            block={true}\n                            onClick={() => {\n                                form.validateFields().then((value) => {\n                                    CApi.resetPassword({\n                                        ...value,\n                                        token: token\n                                    }).then(()=>{\n                                        props.history.push(UrlPrefix + \"/login\")\n                                        message.success(t(\"passwordResetSuccessfully,PleaseLogInAgain\"))\n                                    })\n                                })\n                            }}\n                        >\n                            {t(\"Submit\")}\n                        </Button>\n                    </Card>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport default withRouter(ResetPass)\n"],"sourceRoot":""}